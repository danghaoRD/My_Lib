
SPI_RF_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000230c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080024f0  080024f0  000124f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002520  08002520  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002520  08002520  00012520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002528  08002528  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002528  08002528  00012528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800252c  0800252c  0001252c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002530  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  2000000c  0800253c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000090  0800253c  00020090  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000051c4  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000010a9  00000000  00000000  000251f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000005d0  00000000  00000000  000262a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000538  00000000  00000000  00026878  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a8a2  00000000  00000000  00026db0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004b7b  00000000  00000000  00041652  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00095bb9  00000000  00000000  000461cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dbd86  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001690  00000000  00000000  000dbe04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	080024d8 	.word	0x080024d8

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	080024d8 	.word	0x080024d8

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b974 	b.w	8000524 <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	468c      	mov	ip, r1
 800025a:	4604      	mov	r4, r0
 800025c:	9e08      	ldr	r6, [sp, #32]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d14b      	bne.n	80002fa <__udivmoddi4+0xa6>
 8000262:	428a      	cmp	r2, r1
 8000264:	4615      	mov	r5, r2
 8000266:	d967      	bls.n	8000338 <__udivmoddi4+0xe4>
 8000268:	fab2 f282 	clz	r2, r2
 800026c:	b14a      	cbz	r2, 8000282 <__udivmoddi4+0x2e>
 800026e:	f1c2 0720 	rsb	r7, r2, #32
 8000272:	fa01 f302 	lsl.w	r3, r1, r2
 8000276:	fa20 f707 	lsr.w	r7, r0, r7
 800027a:	4095      	lsls	r5, r2
 800027c:	ea47 0c03 	orr.w	ip, r7, r3
 8000280:	4094      	lsls	r4, r2
 8000282:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000286:	fbbc f7fe 	udiv	r7, ip, lr
 800028a:	fa1f f885 	uxth.w	r8, r5
 800028e:	fb0e c317 	mls	r3, lr, r7, ip
 8000292:	fb07 f908 	mul.w	r9, r7, r8
 8000296:	0c21      	lsrs	r1, r4, #16
 8000298:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800029c:	4599      	cmp	r9, r3
 800029e:	d909      	bls.n	80002b4 <__udivmoddi4+0x60>
 80002a0:	18eb      	adds	r3, r5, r3
 80002a2:	f107 31ff 	add.w	r1, r7, #4294967295
 80002a6:	f080 811c 	bcs.w	80004e2 <__udivmoddi4+0x28e>
 80002aa:	4599      	cmp	r9, r3
 80002ac:	f240 8119 	bls.w	80004e2 <__udivmoddi4+0x28e>
 80002b0:	3f02      	subs	r7, #2
 80002b2:	442b      	add	r3, r5
 80002b4:	eba3 0309 	sub.w	r3, r3, r9
 80002b8:	fbb3 f0fe 	udiv	r0, r3, lr
 80002bc:	fb0e 3310 	mls	r3, lr, r0, r3
 80002c0:	fb00 f108 	mul.w	r1, r0, r8
 80002c4:	b2a4      	uxth	r4, r4
 80002c6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ca:	42a1      	cmp	r1, r4
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0x8e>
 80002ce:	192c      	adds	r4, r5, r4
 80002d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002d4:	f080 8107 	bcs.w	80004e6 <__udivmoddi4+0x292>
 80002d8:	42a1      	cmp	r1, r4
 80002da:	f240 8104 	bls.w	80004e6 <__udivmoddi4+0x292>
 80002de:	3802      	subs	r0, #2
 80002e0:	442c      	add	r4, r5
 80002e2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e6:	2700      	movs	r7, #0
 80002e8:	1a64      	subs	r4, r4, r1
 80002ea:	b11e      	cbz	r6, 80002f4 <__udivmoddi4+0xa0>
 80002ec:	2300      	movs	r3, #0
 80002ee:	40d4      	lsrs	r4, r2
 80002f0:	e9c6 4300 	strd	r4, r3, [r6]
 80002f4:	4639      	mov	r1, r7
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0xbe>
 80002fe:	2e00      	cmp	r6, #0
 8000300:	f000 80ec 	beq.w	80004dc <__udivmoddi4+0x288>
 8000304:	2700      	movs	r7, #0
 8000306:	e9c6 0100 	strd	r0, r1, [r6]
 800030a:	4638      	mov	r0, r7
 800030c:	4639      	mov	r1, r7
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f783 	clz	r7, r3
 8000316:	2f00      	cmp	r7, #0
 8000318:	d148      	bne.n	80003ac <__udivmoddi4+0x158>
 800031a:	428b      	cmp	r3, r1
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd0>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80fb 	bhi.w	800051a <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb61 0303 	sbc.w	r3, r1, r3
 800032a:	2001      	movs	r0, #1
 800032c:	469c      	mov	ip, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d0e0      	beq.n	80002f4 <__udivmoddi4+0xa0>
 8000332:	e9c6 4c00 	strd	r4, ip, [r6]
 8000336:	e7dd      	b.n	80002f4 <__udivmoddi4+0xa0>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xe8>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 808f 	bne.w	8000464 <__udivmoddi4+0x210>
 8000346:	2701      	movs	r7, #1
 8000348:	1b49      	subs	r1, r1, r5
 800034a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800034e:	fa1f f985 	uxth.w	r9, r5
 8000352:	fbb1 fef8 	udiv	lr, r1, r8
 8000356:	fb08 111e 	mls	r1, r8, lr, r1
 800035a:	fb09 f00e 	mul.w	r0, r9, lr
 800035e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000362:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000366:	4298      	cmp	r0, r3
 8000368:	d907      	bls.n	800037a <__udivmoddi4+0x126>
 800036a:	18eb      	adds	r3, r5, r3
 800036c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x124>
 8000372:	4298      	cmp	r0, r3
 8000374:	f200 80cd 	bhi.w	8000512 <__udivmoddi4+0x2be>
 8000378:	468e      	mov	lr, r1
 800037a:	1a1b      	subs	r3, r3, r0
 800037c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000380:	fb08 3310 	mls	r3, r8, r0, r3
 8000384:	fb09 f900 	mul.w	r9, r9, r0
 8000388:	b2a4      	uxth	r4, r4
 800038a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800038e:	45a1      	cmp	r9, r4
 8000390:	d907      	bls.n	80003a2 <__udivmoddi4+0x14e>
 8000392:	192c      	adds	r4, r5, r4
 8000394:	f100 33ff 	add.w	r3, r0, #4294967295
 8000398:	d202      	bcs.n	80003a0 <__udivmoddi4+0x14c>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f200 80b6 	bhi.w	800050c <__udivmoddi4+0x2b8>
 80003a0:	4618      	mov	r0, r3
 80003a2:	eba4 0409 	sub.w	r4, r4, r9
 80003a6:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80003aa:	e79e      	b.n	80002ea <__udivmoddi4+0x96>
 80003ac:	f1c7 0520 	rsb	r5, r7, #32
 80003b0:	40bb      	lsls	r3, r7
 80003b2:	fa22 fc05 	lsr.w	ip, r2, r5
 80003b6:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ba:	fa21 f405 	lsr.w	r4, r1, r5
 80003be:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003c2:	fbb4 f9fe 	udiv	r9, r4, lr
 80003c6:	fa1f f88c 	uxth.w	r8, ip
 80003ca:	fb0e 4419 	mls	r4, lr, r9, r4
 80003ce:	fa20 f305 	lsr.w	r3, r0, r5
 80003d2:	40b9      	lsls	r1, r7
 80003d4:	fb09 fa08 	mul.w	sl, r9, r8
 80003d8:	4319      	orrs	r1, r3
 80003da:	0c0b      	lsrs	r3, r1, #16
 80003dc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	fa02 f207 	lsl.w	r2, r2, r7
 80003e6:	fa00 f307 	lsl.w	r3, r0, r7
 80003ea:	d90b      	bls.n	8000404 <__udivmoddi4+0x1b0>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80003f4:	f080 8088 	bcs.w	8000508 <__udivmoddi4+0x2b4>
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	f240 8085 	bls.w	8000508 <__udivmoddi4+0x2b4>
 80003fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000402:	4464      	add	r4, ip
 8000404:	eba4 040a 	sub.w	r4, r4, sl
 8000408:	fbb4 f0fe 	udiv	r0, r4, lr
 800040c:	fb0e 4410 	mls	r4, lr, r0, r4
 8000410:	fb00 fa08 	mul.w	sl, r0, r8
 8000414:	b289      	uxth	r1, r1
 8000416:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 800041a:	45a2      	cmp	sl, r4
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x1dc>
 800041e:	eb1c 0404 	adds.w	r4, ip, r4
 8000422:	f100 31ff 	add.w	r1, r0, #4294967295
 8000426:	d26b      	bcs.n	8000500 <__udivmoddi4+0x2ac>
 8000428:	45a2      	cmp	sl, r4
 800042a:	d969      	bls.n	8000500 <__udivmoddi4+0x2ac>
 800042c:	3802      	subs	r0, #2
 800042e:	4464      	add	r4, ip
 8000430:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000434:	fba0 8902 	umull	r8, r9, r0, r2
 8000438:	eba4 040a 	sub.w	r4, r4, sl
 800043c:	454c      	cmp	r4, r9
 800043e:	4641      	mov	r1, r8
 8000440:	46ce      	mov	lr, r9
 8000442:	d354      	bcc.n	80004ee <__udivmoddi4+0x29a>
 8000444:	d051      	beq.n	80004ea <__udivmoddi4+0x296>
 8000446:	2e00      	cmp	r6, #0
 8000448:	d069      	beq.n	800051e <__udivmoddi4+0x2ca>
 800044a:	1a5a      	subs	r2, r3, r1
 800044c:	eb64 040e 	sbc.w	r4, r4, lr
 8000450:	fa04 f505 	lsl.w	r5, r4, r5
 8000454:	fa22 f307 	lsr.w	r3, r2, r7
 8000458:	40fc      	lsrs	r4, r7
 800045a:	431d      	orrs	r5, r3
 800045c:	e9c6 5400 	strd	r5, r4, [r6]
 8000460:	2700      	movs	r7, #0
 8000462:	e747      	b.n	80002f4 <__udivmoddi4+0xa0>
 8000464:	4095      	lsls	r5, r2
 8000466:	f1c2 0320 	rsb	r3, r2, #32
 800046a:	fa21 f003 	lsr.w	r0, r1, r3
 800046e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000472:	fbb0 f7f8 	udiv	r7, r0, r8
 8000476:	fa1f f985 	uxth.w	r9, r5
 800047a:	fb08 0017 	mls	r0, r8, r7, r0
 800047e:	fa24 f303 	lsr.w	r3, r4, r3
 8000482:	4091      	lsls	r1, r2
 8000484:	fb07 fc09 	mul.w	ip, r7, r9
 8000488:	430b      	orrs	r3, r1
 800048a:	0c19      	lsrs	r1, r3, #16
 800048c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000490:	458c      	cmp	ip, r1
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d907      	bls.n	80004a8 <__udivmoddi4+0x254>
 8000498:	1869      	adds	r1, r5, r1
 800049a:	f107 30ff 	add.w	r0, r7, #4294967295
 800049e:	d231      	bcs.n	8000504 <__udivmoddi4+0x2b0>
 80004a0:	458c      	cmp	ip, r1
 80004a2:	d92f      	bls.n	8000504 <__udivmoddi4+0x2b0>
 80004a4:	3f02      	subs	r7, #2
 80004a6:	4429      	add	r1, r5
 80004a8:	eba1 010c 	sub.w	r1, r1, ip
 80004ac:	fbb1 f0f8 	udiv	r0, r1, r8
 80004b0:	fb08 1c10 	mls	ip, r8, r0, r1
 80004b4:	fb00 fe09 	mul.w	lr, r0, r9
 80004b8:	b299      	uxth	r1, r3
 80004ba:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004be:	458e      	cmp	lr, r1
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x27e>
 80004c2:	1869      	adds	r1, r5, r1
 80004c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c8:	d218      	bcs.n	80004fc <__udivmoddi4+0x2a8>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d916      	bls.n	80004fc <__udivmoddi4+0x2a8>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4429      	add	r1, r5
 80004d2:	eba1 010e 	sub.w	r1, r1, lr
 80004d6:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004da:	e73a      	b.n	8000352 <__udivmoddi4+0xfe>
 80004dc:	4637      	mov	r7, r6
 80004de:	4630      	mov	r0, r6
 80004e0:	e708      	b.n	80002f4 <__udivmoddi4+0xa0>
 80004e2:	460f      	mov	r7, r1
 80004e4:	e6e6      	b.n	80002b4 <__udivmoddi4+0x60>
 80004e6:	4618      	mov	r0, r3
 80004e8:	e6fb      	b.n	80002e2 <__udivmoddi4+0x8e>
 80004ea:	4543      	cmp	r3, r8
 80004ec:	d2ab      	bcs.n	8000446 <__udivmoddi4+0x1f2>
 80004ee:	ebb8 0102 	subs.w	r1, r8, r2
 80004f2:	eb69 020c 	sbc.w	r2, r9, ip
 80004f6:	3801      	subs	r0, #1
 80004f8:	4696      	mov	lr, r2
 80004fa:	e7a4      	b.n	8000446 <__udivmoddi4+0x1f2>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e7e8      	b.n	80004d2 <__udivmoddi4+0x27e>
 8000500:	4608      	mov	r0, r1
 8000502:	e795      	b.n	8000430 <__udivmoddi4+0x1dc>
 8000504:	4607      	mov	r7, r0
 8000506:	e7cf      	b.n	80004a8 <__udivmoddi4+0x254>
 8000508:	4681      	mov	r9, r0
 800050a:	e77b      	b.n	8000404 <__udivmoddi4+0x1b0>
 800050c:	3802      	subs	r0, #2
 800050e:	442c      	add	r4, r5
 8000510:	e747      	b.n	80003a2 <__udivmoddi4+0x14e>
 8000512:	f1ae 0e02 	sub.w	lr, lr, #2
 8000516:	442b      	add	r3, r5
 8000518:	e72f      	b.n	800037a <__udivmoddi4+0x126>
 800051a:	4638      	mov	r0, r7
 800051c:	e707      	b.n	800032e <__udivmoddi4+0xda>
 800051e:	4637      	mov	r7, r6
 8000520:	e6e8      	b.n	80002f4 <__udivmoddi4+0xa0>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800052c:	f000 fab2 	bl	8000a94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000530:	f000 f814 	bl	800055c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000534:	f000 f88c 	bl	8000650 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000538:	f000 f852 	bl	80005e0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  PL1167_Init();
 800053c:	f000 f974 	bl	8000828 <PL1167_Init>
//		HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_SET);
//
//		HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
//		HAL_Delay(1);

	  reg = PL1167_Read(0x21);
 8000540:	2021      	movs	r0, #33	; 0x21
 8000542:	f000 f93f 	bl	80007c4 <PL1167_Read>
 8000546:	4603      	mov	r3, r0
 8000548:	461a      	mov	r2, r3
 800054a:	4b03      	ldr	r3, [pc, #12]	; (8000558 <main+0x30>)
 800054c:	801a      	strh	r2, [r3, #0]
	  HAL_Delay(1000);
 800054e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000552:	f000 fb01 	bl	8000b58 <HAL_Delay>
	  reg = PL1167_Read(0x21);
 8000556:	e7f3      	b.n	8000540 <main+0x18>
 8000558:	20000028 	.word	0x20000028

0800055c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b094      	sub	sp, #80	; 0x50
 8000560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000562:	f107 0318 	add.w	r3, r7, #24
 8000566:	2238      	movs	r2, #56	; 0x38
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f001 ffac 	bl	80024c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000570:	1d3b      	adds	r3, r7, #4
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]
 800057c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800057e:	2302      	movs	r3, #2
 8000580:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000582:	2301      	movs	r3, #1
 8000584:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000586:	2310      	movs	r3, #16
 8000588:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800058a:	2300      	movs	r3, #0
 800058c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL_NONE;
 800058e:	2300      	movs	r3, #0
 8000590:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000592:	f107 0318 	add.w	r3, r7, #24
 8000596:	4618      	mov	r0, r3
 8000598:	f000 fd56 	bl	8001048 <HAL_RCC_OscConfig>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <SystemClock_Config+0x4a>
  {
    Error_Handler();
 80005a2:	f000 f967 	bl	8000874 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a6:	230f      	movs	r3, #15
 80005a8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005aa:	2300      	movs	r3, #0
 80005ac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ae:	2300      	movs	r3, #0
 80005b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b2:	2300      	movs	r3, #0
 80005b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b6:	2300      	movs	r3, #0
 80005b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	2100      	movs	r1, #0
 80005be:	4618      	mov	r0, r3
 80005c0:	f001 f858 	bl	8001674 <HAL_RCC_ClockConfig>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005ca:	f000 f953 	bl	8000874 <Error_Handler>
  }
  /** Configure the Systick interrupt time 
  */
  __HAL_RCC_PLLI2S_ENABLE();
 80005ce:	4b03      	ldr	r3, [pc, #12]	; (80005dc <SystemClock_Config+0x80>)
 80005d0:	2201      	movs	r2, #1
 80005d2:	601a      	str	r2, [r3, #0]
}
 80005d4:	bf00      	nop
 80005d6:	3750      	adds	r7, #80	; 0x50
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	42420070 	.word	0x42420070

080005e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005e4:	4b18      	ldr	r3, [pc, #96]	; (8000648 <MX_SPI1_Init+0x68>)
 80005e6:	4a19      	ldr	r2, [pc, #100]	; (800064c <MX_SPI1_Init+0x6c>)
 80005e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005ea:	4b17      	ldr	r3, [pc, #92]	; (8000648 <MX_SPI1_Init+0x68>)
 80005ec:	f44f 7282 	mov.w	r2, #260	; 0x104
 80005f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005f2:	4b15      	ldr	r3, [pc, #84]	; (8000648 <MX_SPI1_Init+0x68>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80005f8:	4b13      	ldr	r3, [pc, #76]	; (8000648 <MX_SPI1_Init+0x68>)
 80005fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80005fe:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000600:	4b11      	ldr	r3, [pc, #68]	; (8000648 <MX_SPI1_Init+0x68>)
 8000602:	2200      	movs	r2, #0
 8000604:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000606:	4b10      	ldr	r3, [pc, #64]	; (8000648 <MX_SPI1_Init+0x68>)
 8000608:	2200      	movs	r2, #0
 800060a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800060c:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <MX_SPI1_Init+0x68>)
 800060e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000612:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000614:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <MX_SPI1_Init+0x68>)
 8000616:	2228      	movs	r2, #40	; 0x28
 8000618:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 800061a:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <MX_SPI1_Init+0x68>)
 800061c:	2280      	movs	r2, #128	; 0x80
 800061e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000620:	4b09      	ldr	r3, [pc, #36]	; (8000648 <MX_SPI1_Init+0x68>)
 8000622:	2200      	movs	r2, #0
 8000624:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000626:	4b08      	ldr	r3, [pc, #32]	; (8000648 <MX_SPI1_Init+0x68>)
 8000628:	2200      	movs	r2, #0
 800062a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <MX_SPI1_Init+0x68>)
 800062e:	220a      	movs	r2, #10
 8000630:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000632:	4805      	ldr	r0, [pc, #20]	; (8000648 <MX_SPI1_Init+0x68>)
 8000634:	f001 fa0a 	bl	8001a4c <HAL_SPI_Init>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 800063e:	f000 f919 	bl	8000874 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20000034 	.word	0x20000034
 800064c:	40013000 	.word	0x40013000

08000650 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b088      	sub	sp, #32
 8000654:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000656:	f107 0310 	add.w	r3, r7, #16
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]
 8000662:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000664:	4b3d      	ldr	r3, [pc, #244]	; (800075c <MX_GPIO_Init+0x10c>)
 8000666:	699b      	ldr	r3, [r3, #24]
 8000668:	4a3c      	ldr	r2, [pc, #240]	; (800075c <MX_GPIO_Init+0x10c>)
 800066a:	f043 0304 	orr.w	r3, r3, #4
 800066e:	6193      	str	r3, [r2, #24]
 8000670:	4b3a      	ldr	r3, [pc, #232]	; (800075c <MX_GPIO_Init+0x10c>)
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	f003 0304 	and.w	r3, r3, #4
 8000678:	60fb      	str	r3, [r7, #12]
 800067a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800067c:	4b37      	ldr	r3, [pc, #220]	; (800075c <MX_GPIO_Init+0x10c>)
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	4a36      	ldr	r2, [pc, #216]	; (800075c <MX_GPIO_Init+0x10c>)
 8000682:	f043 0310 	orr.w	r3, r3, #16
 8000686:	6193      	str	r3, [r2, #24]
 8000688:	4b34      	ldr	r3, [pc, #208]	; (800075c <MX_GPIO_Init+0x10c>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	f003 0310 	and.w	r3, r3, #16
 8000690:	60bb      	str	r3, [r7, #8]
 8000692:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000694:	4b31      	ldr	r3, [pc, #196]	; (800075c <MX_GPIO_Init+0x10c>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	4a30      	ldr	r2, [pc, #192]	; (800075c <MX_GPIO_Init+0x10c>)
 800069a:	f043 0308 	orr.w	r3, r3, #8
 800069e:	6193      	str	r3, [r2, #24]
 80006a0:	4b2e      	ldr	r3, [pc, #184]	; (800075c <MX_GPIO_Init+0x10c>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	f003 0308 	and.w	r3, r3, #8
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006ac:	4b2b      	ldr	r3, [pc, #172]	; (800075c <MX_GPIO_Init+0x10c>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	4a2a      	ldr	r2, [pc, #168]	; (800075c <MX_GPIO_Init+0x10c>)
 80006b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006b6:	6193      	str	r3, [r2, #24]
 80006b8:	4b28      	ldr	r3, [pc, #160]	; (800075c <MX_GPIO_Init+0x10c>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006c0:	603b      	str	r3, [r7, #0]
 80006c2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80006c4:	2200      	movs	r2, #0
 80006c6:	2110      	movs	r1, #16
 80006c8:	4825      	ldr	r0, [pc, #148]	; (8000760 <MX_GPIO_Init+0x110>)
 80006ca:	f000 fca5 	bl	8001018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_RESET);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2101      	movs	r1, #1
 80006d2:	4824      	ldr	r0, [pc, #144]	; (8000764 <MX_GPIO_Init+0x114>)
 80006d4:	f000 fca0 	bl	8001018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80006d8:	2200      	movs	r2, #0
 80006da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006de:	4822      	ldr	r0, [pc, #136]	; (8000768 <MX_GPIO_Init+0x118>)
 80006e0:	f000 fc9a 	bl	8001018 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_Pin */
  GPIO_InitStruct.Pin = CS_Pin;
 80006e4:	2310      	movs	r3, #16
 80006e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e8:	2301      	movs	r3, #1
 80006ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f0:	2302      	movs	r3, #2
 80006f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 80006f4:	f107 0310 	add.w	r3, r7, #16
 80006f8:	4619      	mov	r1, r3
 80006fa:	4819      	ldr	r0, [pc, #100]	; (8000760 <MX_GPIO_Init+0x110>)
 80006fc:	f000 fb32 	bl	8000d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : PKT_Pin */
  GPIO_InitStruct.Pin = PKT_Pin;
 8000700:	2320      	movs	r3, #32
 8000702:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000704:	2300      	movs	r3, #0
 8000706:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PKT_GPIO_Port, &GPIO_InitStruct);
 800070c:	f107 0310 	add.w	r3, r7, #16
 8000710:	4619      	mov	r1, r3
 8000712:	4813      	ldr	r0, [pc, #76]	; (8000760 <MX_GPIO_Init+0x110>)
 8000714:	f000 fb26 	bl	8000d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : RS_Pin */
  GPIO_InitStruct.Pin = RS_Pin;
 8000718:	2301      	movs	r3, #1
 800071a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071c:	2301      	movs	r3, #1
 800071e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000724:	2302      	movs	r3, #2
 8000726:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RS_GPIO_Port, &GPIO_InitStruct);
 8000728:	f107 0310 	add.w	r3, r7, #16
 800072c:	4619      	mov	r1, r3
 800072e:	480d      	ldr	r0, [pc, #52]	; (8000764 <MX_GPIO_Init+0x114>)
 8000730:	f000 fb18 	bl	8000d64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000734:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000738:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073a:	2301      	movs	r3, #1
 800073c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073e:	2300      	movs	r3, #0
 8000740:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000742:	2302      	movs	r3, #2
 8000744:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000746:	f107 0310 	add.w	r3, r7, #16
 800074a:	4619      	mov	r1, r3
 800074c:	4806      	ldr	r0, [pc, #24]	; (8000768 <MX_GPIO_Init+0x118>)
 800074e:	f000 fb09 	bl	8000d64 <HAL_GPIO_Init>

}
 8000752:	bf00      	nop
 8000754:	3720      	adds	r7, #32
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40021000 	.word	0x40021000
 8000760:	40011000 	.word	0x40011000
 8000764:	40010c00 	.word	0x40010c00
 8000768:	40011800 	.word	0x40011800

0800076c <PL1167_Write>:

/* USER CODE BEGIN 4 */

void PL1167_Write(uint8_t address, uint16_t value)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b084      	sub	sp, #16
 8000770:	af00      	add	r7, sp, #0
 8000772:	4603      	mov	r3, r0
 8000774:	460a      	mov	r2, r1
 8000776:	71fb      	strb	r3, [r7, #7]
 8000778:	4613      	mov	r3, r2
 800077a:	80bb      	strh	r3, [r7, #4]
	uint8_t data[3];
	data[0] = address;
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	733b      	strb	r3, [r7, #12]
	// thử truy�?n bit cao trc
	data[1] = value & 0x00ff;
 8000780:	88bb      	ldrh	r3, [r7, #4]
 8000782:	b2db      	uxtb	r3, r3
 8000784:	737b      	strb	r3, [r7, #13]
	data[2] = value >> 8;
 8000786:	88bb      	ldrh	r3, [r7, #4]
 8000788:	0a1b      	lsrs	r3, r3, #8
 800078a:	b29b      	uxth	r3, r3
 800078c:	b2db      	uxtb	r3, r3
 800078e:	73bb      	strb	r3, [r7, #14]
//	data[1] = value | 0x00;
//	data[2] = (value >> 8) | 0x00;

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 8000790:	2200      	movs	r2, #0
 8000792:	2110      	movs	r1, #16
 8000794:	4809      	ldr	r0, [pc, #36]	; (80007bc <PL1167_Write+0x50>)
 8000796:	f000 fc3f 	bl	8001018 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, data, 3, 100);
 800079a:	f107 010c 	add.w	r1, r7, #12
 800079e:	2364      	movs	r3, #100	; 0x64
 80007a0:	2203      	movs	r2, #3
 80007a2:	4807      	ldr	r0, [pc, #28]	; (80007c0 <PL1167_Write+0x54>)
 80007a4:	f001 f9b3 	bl	8001b0e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80007a8:	2201      	movs	r2, #1
 80007aa:	2110      	movs	r1, #16
 80007ac:	4803      	ldr	r0, [pc, #12]	; (80007bc <PL1167_Write+0x50>)
 80007ae:	f000 fc33 	bl	8001018 <HAL_GPIO_WritePin>
}
 80007b2:	bf00      	nop
 80007b4:	3710      	adds	r7, #16
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40011000 	.word	0x40011000
 80007c0:	20000034 	.word	0x20000034

080007c4 <PL1167_Read>:

uint16_t PL1167_Read(uint8_t address)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	71fb      	strb	r3, [r7, #7]
	//uint8_t rec[2];
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2110      	movs	r1, #16
 80007d2:	4812      	ldr	r0, [pc, #72]	; (800081c <PL1167_Read+0x58>)
 80007d4:	f000 fc20 	bl	8001018 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &address, 1, 1);
 80007d8:	1df9      	adds	r1, r7, #7
 80007da:	2301      	movs	r3, #1
 80007dc:	2201      	movs	r2, #1
 80007de:	4810      	ldr	r0, [pc, #64]	; (8000820 <PL1167_Read+0x5c>)
 80007e0:	f001 f995 	bl	8001b0e <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, buff, 3, 100);
 80007e4:	2364      	movs	r3, #100	; 0x64
 80007e6:	2203      	movs	r2, #3
 80007e8:	490e      	ldr	r1, [pc, #56]	; (8000824 <PL1167_Read+0x60>)
 80007ea:	480d      	ldr	r0, [pc, #52]	; (8000820 <PL1167_Read+0x5c>)
 80007ec:	f001 fac3 	bl	8001d76 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 80007f0:	2201      	movs	r2, #1
 80007f2:	2110      	movs	r1, #16
 80007f4:	4809      	ldr	r0, [pc, #36]	; (800081c <PL1167_Read+0x58>)
 80007f6:	f000 fc0f 	bl	8001018 <HAL_GPIO_WritePin>
//	uint16_t data = rec[0];
//	data = (data << 8) | rec[1];
	uint16_t data = buff[0];
 80007fa:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <PL1167_Read+0x60>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	81fb      	strh	r3, [r7, #14]
	data = (data << 8) | buff[1];
 8000800:	89fb      	ldrh	r3, [r7, #14]
 8000802:	021b      	lsls	r3, r3, #8
 8000804:	b21a      	sxth	r2, r3
 8000806:	4b07      	ldr	r3, [pc, #28]	; (8000824 <PL1167_Read+0x60>)
 8000808:	785b      	ldrb	r3, [r3, #1]
 800080a:	b21b      	sxth	r3, r3
 800080c:	4313      	orrs	r3, r2
 800080e:	b21b      	sxth	r3, r3
 8000810:	81fb      	strh	r3, [r7, #14]
	return data;
 8000812:	89fb      	ldrh	r3, [r7, #14]
}
 8000814:	4618      	mov	r0, r3
 8000816:	3710      	adds	r7, #16
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40011000 	.word	0x40011000
 8000820:	20000034 	.word	0x20000034
 8000824:	2000002c 	.word	0x2000002c

08000828 <PL1167_Init>:

void PL1167_Init()
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_RESET);
 800082c:	2200      	movs	r2, #0
 800082e:	2101      	movs	r1, #1
 8000830:	480e      	ldr	r0, [pc, #56]	; (800086c <PL1167_Init+0x44>)
 8000832:	f000 fbf1 	bl	8001018 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000836:	2001      	movs	r0, #1
 8000838:	f000 f98e 	bl	8000b58 <HAL_Delay>
	HAL_GPIO_WritePin(RS_GPIO_Port, RS_Pin, GPIO_PIN_SET);
 800083c:	2201      	movs	r2, #1
 800083e:	2101      	movs	r1, #1
 8000840:	480a      	ldr	r0, [pc, #40]	; (800086c <PL1167_Init+0x44>)
 8000842:	f000 fbe9 	bl	8001018 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(CS_GPIO_Port, CS_Pin, GPIO_PIN_SET);
 8000846:	2201      	movs	r2, #1
 8000848:	2110      	movs	r1, #16
 800084a:	4809      	ldr	r0, [pc, #36]	; (8000870 <PL1167_Init+0x48>)
 800084c:	f000 fbe4 	bl	8001018 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000850:	2001      	movs	r0, #1
 8000852:	f000 f981 	bl	8000b58 <HAL_Delay>
	// clear RX_FIFO pointer REG_52 0x34:  get 0b0000 000 1000 0000 (0x80)
	PL1167_Write(0x34, 0x0080);
 8000856:	2180      	movs	r1, #128	; 0x80
 8000858:	2034      	movs	r0, #52	; 0x34
 800085a:	f7ff ff87 	bl	800076c <PL1167_Write>
	// Setup REG_7(0x07) for EN_RX mode and RF_CH_SEL
	// bit 7 =1 for EN_RX. bit 8=0. RF_Frequen =2.409Ghz REG_7= 0b0000 0000 1000 0111

	PL1167_Write(0x07, 0x0087);
 800085e:	2187      	movs	r1, #135	; 0x87
 8000860:	2007      	movs	r0, #7
 8000862:	f7ff ff83 	bl	800076c <PL1167_Write>

}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40010c00 	.word	0x40010c00
 8000870:	40011000 	.word	0x40011000

08000874 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr

08000880 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000880:	b480      	push	{r7}
 8000882:	b085      	sub	sp, #20
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000886:	4b15      	ldr	r3, [pc, #84]	; (80008dc <HAL_MspInit+0x5c>)
 8000888:	699b      	ldr	r3, [r3, #24]
 800088a:	4a14      	ldr	r2, [pc, #80]	; (80008dc <HAL_MspInit+0x5c>)
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	6193      	str	r3, [r2, #24]
 8000892:	4b12      	ldr	r3, [pc, #72]	; (80008dc <HAL_MspInit+0x5c>)
 8000894:	699b      	ldr	r3, [r3, #24]
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	60bb      	str	r3, [r7, #8]
 800089c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089e:	4b0f      	ldr	r3, [pc, #60]	; (80008dc <HAL_MspInit+0x5c>)
 80008a0:	69db      	ldr	r3, [r3, #28]
 80008a2:	4a0e      	ldr	r2, [pc, #56]	; (80008dc <HAL_MspInit+0x5c>)
 80008a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a8:	61d3      	str	r3, [r2, #28]
 80008aa:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <HAL_MspInit+0x5c>)
 80008ac:	69db      	ldr	r3, [r3, #28]
 80008ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008b6:	4b0a      	ldr	r3, [pc, #40]	; (80008e0 <HAL_MspInit+0x60>)
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80008c2:	60fb      	str	r3, [r7, #12]
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	4a04      	ldr	r2, [pc, #16]	; (80008e0 <HAL_MspInit+0x60>)
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d2:	bf00      	nop
 80008d4:	3714      	adds	r7, #20
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr
 80008dc:	40021000 	.word	0x40021000
 80008e0:	40010000 	.word	0x40010000

080008e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b088      	sub	sp, #32
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ec:	f107 0310 	add.w	r3, r7, #16
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4a1b      	ldr	r2, [pc, #108]	; (800096c <HAL_SPI_MspInit+0x88>)
 8000900:	4293      	cmp	r3, r2
 8000902:	d12f      	bne.n	8000964 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000904:	4b1a      	ldr	r3, [pc, #104]	; (8000970 <HAL_SPI_MspInit+0x8c>)
 8000906:	699b      	ldr	r3, [r3, #24]
 8000908:	4a19      	ldr	r2, [pc, #100]	; (8000970 <HAL_SPI_MspInit+0x8c>)
 800090a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800090e:	6193      	str	r3, [r2, #24]
 8000910:	4b17      	ldr	r3, [pc, #92]	; (8000970 <HAL_SPI_MspInit+0x8c>)
 8000912:	699b      	ldr	r3, [r3, #24]
 8000914:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000918:	60fb      	str	r3, [r7, #12]
 800091a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800091c:	4b14      	ldr	r3, [pc, #80]	; (8000970 <HAL_SPI_MspInit+0x8c>)
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	4a13      	ldr	r2, [pc, #76]	; (8000970 <HAL_SPI_MspInit+0x8c>)
 8000922:	f043 0304 	orr.w	r3, r3, #4
 8000926:	6193      	str	r3, [r2, #24]
 8000928:	4b11      	ldr	r3, [pc, #68]	; (8000970 <HAL_SPI_MspInit+0x8c>)
 800092a:	699b      	ldr	r3, [r3, #24]
 800092c:	f003 0304 	and.w	r3, r3, #4
 8000930:	60bb      	str	r3, [r7, #8]
 8000932:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000934:	23a0      	movs	r3, #160	; 0xa0
 8000936:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000938:	2302      	movs	r3, #2
 800093a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800093c:	2303      	movs	r3, #3
 800093e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000940:	f107 0310 	add.w	r3, r7, #16
 8000944:	4619      	mov	r1, r3
 8000946:	480b      	ldr	r0, [pc, #44]	; (8000974 <HAL_SPI_MspInit+0x90>)
 8000948:	f000 fa0c 	bl	8000d64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800094c:	2340      	movs	r3, #64	; 0x40
 800094e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000950:	2300      	movs	r3, #0
 8000952:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000958:	f107 0310 	add.w	r3, r7, #16
 800095c:	4619      	mov	r1, r3
 800095e:	4805      	ldr	r0, [pc, #20]	; (8000974 <HAL_SPI_MspInit+0x90>)
 8000960:	f000 fa00 	bl	8000d64 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000964:	bf00      	nop
 8000966:	3720      	adds	r7, #32
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40013000 	.word	0x40013000
 8000970:	40021000 	.word	0x40021000
 8000974:	40010800 	.word	0x40010800

08000978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	bc80      	pop	{r7}
 8000982:	4770      	bx	lr

08000984 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <HardFault_Handler+0x4>

0800098a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800098e:	e7fe      	b.n	800098e <MemManage_Handler+0x4>

08000990 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000994:	e7fe      	b.n	8000994 <BusFault_Handler+0x4>

08000996 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800099a:	e7fe      	b.n	800099a <UsageFault_Handler+0x4>

0800099c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bc80      	pop	{r7}
 80009a6:	4770      	bx	lr

080009a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bc80      	pop	{r7}
 80009b2:	4770      	bx	lr

080009b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bc80      	pop	{r7}
 80009be:	4770      	bx	lr

080009c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c4:	f000 f8ac 	bl	8000b20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c8:	bf00      	nop
 80009ca:	bd80      	pop	{r7, pc}

080009cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80009d0:	4b1a      	ldr	r3, [pc, #104]	; (8000a3c <SystemInit+0x70>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a19      	ldr	r2, [pc, #100]	; (8000a3c <SystemInit+0x70>)
 80009d6:	f043 0301 	orr.w	r3, r3, #1
 80009da:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
#else
  RCC->CFGR &= 0xF0FF0000U;
 80009dc:	4b17      	ldr	r3, [pc, #92]	; (8000a3c <SystemInit+0x70>)
 80009de:	685a      	ldr	r2, [r3, #4]
 80009e0:	4916      	ldr	r1, [pc, #88]	; (8000a3c <SystemInit+0x70>)
 80009e2:	4b17      	ldr	r3, [pc, #92]	; (8000a40 <SystemInit+0x74>)
 80009e4:	4013      	ands	r3, r2
 80009e6:	604b      	str	r3, [r1, #4]
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80009e8:	4b14      	ldr	r3, [pc, #80]	; (8000a3c <SystemInit+0x70>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a13      	ldr	r2, [pc, #76]	; (8000a3c <SystemInit+0x70>)
 80009ee:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80009f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009f6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80009f8:	4b10      	ldr	r3, [pc, #64]	; (8000a3c <SystemInit+0x70>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a0f      	ldr	r2, [pc, #60]	; (8000a3c <SystemInit+0x70>)
 80009fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a02:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000a04:	4b0d      	ldr	r3, [pc, #52]	; (8000a3c <SystemInit+0x70>)
 8000a06:	685b      	ldr	r3, [r3, #4]
 8000a08:	4a0c      	ldr	r2, [pc, #48]	; (8000a3c <SystemInit+0x70>)
 8000a0a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000a0e:	6053      	str	r3, [r2, #4]

#if defined(STM32F105xC) || defined(STM32F107xC)
  /* Reset PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEBFFFFFFU;
 8000a10:	4b0a      	ldr	r3, [pc, #40]	; (8000a3c <SystemInit+0x70>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a09      	ldr	r2, [pc, #36]	; (8000a3c <SystemInit+0x70>)
 8000a16:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8000a1a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x00FF0000U;
 8000a1c:	4b07      	ldr	r3, [pc, #28]	; (8000a3c <SystemInit+0x70>)
 8000a1e:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8000a22:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;
 8000a24:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <SystemInit+0x70>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	62da      	str	r2, [r3, #44]	; 0x2c
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000a2a:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <SystemInit+0x78>)
 8000a2c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a30:	609a      	str	r2, [r3, #8]
#endif 
}
 8000a32:	bf00      	nop
 8000a34:	46bd      	mov	sp, r7
 8000a36:	bc80      	pop	{r7}
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	40021000 	.word	0x40021000
 8000a40:	f0ff0000 	.word	0xf0ff0000
 8000a44:	e000ed00 	.word	0xe000ed00

08000a48 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000a48:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000a4a:	e003      	b.n	8000a54 <LoopCopyDataInit>

08000a4c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000a4c:	4b0b      	ldr	r3, [pc, #44]	; (8000a7c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000a4e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000a50:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000a52:	3104      	adds	r1, #4

08000a54 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000a54:	480a      	ldr	r0, [pc, #40]	; (8000a80 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000a56:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000a58:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000a5a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000a5c:	d3f6      	bcc.n	8000a4c <CopyDataInit>
  ldr r2, =_sbss
 8000a5e:	4a0a      	ldr	r2, [pc, #40]	; (8000a88 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000a60:	e002      	b.n	8000a68 <LoopFillZerobss>

08000a62 <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000a62:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000a64:	f842 3b04 	str.w	r3, [r2], #4

08000a68 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000a68:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000a6a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000a6c:	d3f9      	bcc.n	8000a62 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a6e:	f7ff ffad 	bl	80009cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a72:	f001 fd05 	bl	8002480 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a76:	f7ff fd57 	bl	8000528 <main>
  bx lr
 8000a7a:	4770      	bx	lr
  ldr r3, =_sidata
 8000a7c:	08002530 	.word	0x08002530
  ldr r0, =_sdata
 8000a80:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000a84:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000a88:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000a8c:	20000090 	.word	0x20000090

08000a90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a90:	e7fe      	b.n	8000a90 <ADC1_2_IRQHandler>
	...

08000a94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a98:	4b08      	ldr	r3, [pc, #32]	; (8000abc <HAL_Init+0x28>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a07      	ldr	r2, [pc, #28]	; (8000abc <HAL_Init+0x28>)
 8000a9e:	f043 0310 	orr.w	r3, r3, #16
 8000aa2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa4:	2003      	movs	r0, #3
 8000aa6:	f000 f929 	bl	8000cfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aaa:	2000      	movs	r0, #0
 8000aac:	f000 f808 	bl	8000ac0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ab0:	f7ff fee6 	bl	8000880 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ab4:	2300      	movs	r3, #0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40022000 	.word	0x40022000

08000ac0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ac8:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <HAL_InitTick+0x54>)
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <HAL_InitTick+0x58>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ad6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f000 f933 	bl	8000d4a <HAL_SYSTICK_Config>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aea:	2301      	movs	r3, #1
 8000aec:	e00e      	b.n	8000b0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	2b0f      	cmp	r3, #15
 8000af2:	d80a      	bhi.n	8000b0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af4:	2200      	movs	r2, #0
 8000af6:	6879      	ldr	r1, [r7, #4]
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	f000 f909 	bl	8000d12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b00:	4a06      	ldr	r2, [pc, #24]	; (8000b1c <HAL_InitTick+0x5c>)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b06:	2300      	movs	r3, #0
 8000b08:	e000      	b.n	8000b0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3708      	adds	r7, #8
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20000000 	.word	0x20000000
 8000b18:	20000008 	.word	0x20000008
 8000b1c:	20000004 	.word	0x20000004

08000b20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b24:	4b05      	ldr	r3, [pc, #20]	; (8000b3c <HAL_IncTick+0x1c>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	461a      	mov	r2, r3
 8000b2a:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <HAL_IncTick+0x20>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4413      	add	r3, r2
 8000b30:	4a03      	ldr	r2, [pc, #12]	; (8000b40 <HAL_IncTick+0x20>)
 8000b32:	6013      	str	r3, [r2, #0]
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bc80      	pop	{r7}
 8000b3a:	4770      	bx	lr
 8000b3c:	20000008 	.word	0x20000008
 8000b40:	2000008c 	.word	0x2000008c

08000b44 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  return uwTick;
 8000b48:	4b02      	ldr	r3, [pc, #8]	; (8000b54 <HAL_GetTick+0x10>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr
 8000b54:	2000008c 	.word	0x2000008c

08000b58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b60:	f7ff fff0 	bl	8000b44 <HAL_GetTick>
 8000b64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b70:	d005      	beq.n	8000b7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b72:	4b09      	ldr	r3, [pc, #36]	; (8000b98 <HAL_Delay+0x40>)
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	461a      	mov	r2, r3
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b7e:	bf00      	nop
 8000b80:	f7ff ffe0 	bl	8000b44 <HAL_GetTick>
 8000b84:	4602      	mov	r2, r0
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	1ad3      	subs	r3, r2, r3
 8000b8a:	68fa      	ldr	r2, [r7, #12]
 8000b8c:	429a      	cmp	r2, r3
 8000b8e:	d8f7      	bhi.n	8000b80 <HAL_Delay+0x28>
  {
  }
}
 8000b90:	bf00      	nop
 8000b92:	3710      	adds	r7, #16
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	20000008 	.word	0x20000008

08000b9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	f003 0307 	and.w	r3, r3, #7
 8000baa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bac:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bb2:	68ba      	ldr	r2, [r7, #8]
 8000bb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bb8:	4013      	ands	r3, r2
 8000bba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bce:	4a04      	ldr	r2, [pc, #16]	; (8000be0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	60d3      	str	r3, [r2, #12]
}
 8000bd4:	bf00      	nop
 8000bd6:	3714      	adds	r7, #20
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	bc80      	pop	{r7}
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000be8:	4b04      	ldr	r3, [pc, #16]	; (8000bfc <__NVIC_GetPriorityGrouping+0x18>)
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	0a1b      	lsrs	r3, r3, #8
 8000bee:	f003 0307 	and.w	r3, r3, #7
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bc80      	pop	{r7}
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	6039      	str	r1, [r7, #0]
 8000c0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	db0a      	blt.n	8000c2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	b2da      	uxtb	r2, r3
 8000c18:	490c      	ldr	r1, [pc, #48]	; (8000c4c <__NVIC_SetPriority+0x4c>)
 8000c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1e:	0112      	lsls	r2, r2, #4
 8000c20:	b2d2      	uxtb	r2, r2
 8000c22:	440b      	add	r3, r1
 8000c24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c28:	e00a      	b.n	8000c40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	b2da      	uxtb	r2, r3
 8000c2e:	4908      	ldr	r1, [pc, #32]	; (8000c50 <__NVIC_SetPriority+0x50>)
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	f003 030f 	and.w	r3, r3, #15
 8000c36:	3b04      	subs	r3, #4
 8000c38:	0112      	lsls	r2, r2, #4
 8000c3a:	b2d2      	uxtb	r2, r2
 8000c3c:	440b      	add	r3, r1
 8000c3e:	761a      	strb	r2, [r3, #24]
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bc80      	pop	{r7}
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000e100 	.word	0xe000e100
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b089      	sub	sp, #36	; 0x24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	f003 0307 	and.w	r3, r3, #7
 8000c66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c68:	69fb      	ldr	r3, [r7, #28]
 8000c6a:	f1c3 0307 	rsb	r3, r3, #7
 8000c6e:	2b04      	cmp	r3, #4
 8000c70:	bf28      	it	cs
 8000c72:	2304      	movcs	r3, #4
 8000c74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	3304      	adds	r3, #4
 8000c7a:	2b06      	cmp	r3, #6
 8000c7c:	d902      	bls.n	8000c84 <NVIC_EncodePriority+0x30>
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	3b03      	subs	r3, #3
 8000c82:	e000      	b.n	8000c86 <NVIC_EncodePriority+0x32>
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c88:	f04f 32ff 	mov.w	r2, #4294967295
 8000c8c:	69bb      	ldr	r3, [r7, #24]
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	43da      	mvns	r2, r3
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	401a      	ands	r2, r3
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca6:	43d9      	mvns	r1, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cac:	4313      	orrs	r3, r2
         );
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3724      	adds	r7, #36	; 0x24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bc80      	pop	{r7}
 8000cb6:	4770      	bx	lr

08000cb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cc8:	d301      	bcc.n	8000cce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e00f      	b.n	8000cee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cce:	4a0a      	ldr	r2, [pc, #40]	; (8000cf8 <SysTick_Config+0x40>)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cd6:	210f      	movs	r1, #15
 8000cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cdc:	f7ff ff90 	bl	8000c00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ce0:	4b05      	ldr	r3, [pc, #20]	; (8000cf8 <SysTick_Config+0x40>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ce6:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <SysTick_Config+0x40>)
 8000ce8:	2207      	movs	r2, #7
 8000cea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	e000e010 	.word	0xe000e010

08000cfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d04:	6878      	ldr	r0, [r7, #4]
 8000d06:	f7ff ff49 	bl	8000b9c <__NVIC_SetPriorityGrouping>
}
 8000d0a:	bf00      	nop
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b086      	sub	sp, #24
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	4603      	mov	r3, r0
 8000d1a:	60b9      	str	r1, [r7, #8]
 8000d1c:	607a      	str	r2, [r7, #4]
 8000d1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d24:	f7ff ff5e 	bl	8000be4 <__NVIC_GetPriorityGrouping>
 8000d28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	68b9      	ldr	r1, [r7, #8]
 8000d2e:	6978      	ldr	r0, [r7, #20]
 8000d30:	f7ff ff90 	bl	8000c54 <NVIC_EncodePriority>
 8000d34:	4602      	mov	r2, r0
 8000d36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d3a:	4611      	mov	r1, r2
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f7ff ff5f 	bl	8000c00 <__NVIC_SetPriority>
}
 8000d42:	bf00      	nop
 8000d44:	3718      	adds	r7, #24
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}

08000d4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d4a:	b580      	push	{r7, lr}
 8000d4c:	b082      	sub	sp, #8
 8000d4e:	af00      	add	r7, sp, #0
 8000d50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f7ff ffb0 	bl	8000cb8 <SysTick_Config>
 8000d58:	4603      	mov	r3, r0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
	...

08000d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b08b      	sub	sp, #44	; 0x2c
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d72:	2300      	movs	r3, #0
 8000d74:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d76:	e127      	b.n	8000fc8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d78:	2201      	movs	r2, #1
 8000d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	69fa      	ldr	r2, [r7, #28]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	f040 8116 	bne.w	8000fc2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	2b12      	cmp	r3, #18
 8000d9c:	d034      	beq.n	8000e08 <HAL_GPIO_Init+0xa4>
 8000d9e:	2b12      	cmp	r3, #18
 8000da0:	d80d      	bhi.n	8000dbe <HAL_GPIO_Init+0x5a>
 8000da2:	2b02      	cmp	r3, #2
 8000da4:	d02b      	beq.n	8000dfe <HAL_GPIO_Init+0x9a>
 8000da6:	2b02      	cmp	r3, #2
 8000da8:	d804      	bhi.n	8000db4 <HAL_GPIO_Init+0x50>
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d031      	beq.n	8000e12 <HAL_GPIO_Init+0xae>
 8000dae:	2b01      	cmp	r3, #1
 8000db0:	d01c      	beq.n	8000dec <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000db2:	e048      	b.n	8000e46 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000db4:	2b03      	cmp	r3, #3
 8000db6:	d043      	beq.n	8000e40 <HAL_GPIO_Init+0xdc>
 8000db8:	2b11      	cmp	r3, #17
 8000dba:	d01b      	beq.n	8000df4 <HAL_GPIO_Init+0x90>
          break;
 8000dbc:	e043      	b.n	8000e46 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000dbe:	4a89      	ldr	r2, [pc, #548]	; (8000fe4 <HAL_GPIO_Init+0x280>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d026      	beq.n	8000e12 <HAL_GPIO_Init+0xae>
 8000dc4:	4a87      	ldr	r2, [pc, #540]	; (8000fe4 <HAL_GPIO_Init+0x280>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d806      	bhi.n	8000dd8 <HAL_GPIO_Init+0x74>
 8000dca:	4a87      	ldr	r2, [pc, #540]	; (8000fe8 <HAL_GPIO_Init+0x284>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d020      	beq.n	8000e12 <HAL_GPIO_Init+0xae>
 8000dd0:	4a86      	ldr	r2, [pc, #536]	; (8000fec <HAL_GPIO_Init+0x288>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d01d      	beq.n	8000e12 <HAL_GPIO_Init+0xae>
          break;
 8000dd6:	e036      	b.n	8000e46 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000dd8:	4a85      	ldr	r2, [pc, #532]	; (8000ff0 <HAL_GPIO_Init+0x28c>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d019      	beq.n	8000e12 <HAL_GPIO_Init+0xae>
 8000dde:	4a85      	ldr	r2, [pc, #532]	; (8000ff4 <HAL_GPIO_Init+0x290>)
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d016      	beq.n	8000e12 <HAL_GPIO_Init+0xae>
 8000de4:	4a84      	ldr	r2, [pc, #528]	; (8000ff8 <HAL_GPIO_Init+0x294>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d013      	beq.n	8000e12 <HAL_GPIO_Init+0xae>
          break;
 8000dea:	e02c      	b.n	8000e46 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	623b      	str	r3, [r7, #32]
          break;
 8000df2:	e028      	b.n	8000e46 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	3304      	adds	r3, #4
 8000dfa:	623b      	str	r3, [r7, #32]
          break;
 8000dfc:	e023      	b.n	8000e46 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	68db      	ldr	r3, [r3, #12]
 8000e02:	3308      	adds	r3, #8
 8000e04:	623b      	str	r3, [r7, #32]
          break;
 8000e06:	e01e      	b.n	8000e46 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	330c      	adds	r3, #12
 8000e0e:	623b      	str	r3, [r7, #32]
          break;
 8000e10:	e019      	b.n	8000e46 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d102      	bne.n	8000e20 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e1a:	2304      	movs	r3, #4
 8000e1c:	623b      	str	r3, [r7, #32]
          break;
 8000e1e:	e012      	b.n	8000e46 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	689b      	ldr	r3, [r3, #8]
 8000e24:	2b01      	cmp	r3, #1
 8000e26:	d105      	bne.n	8000e34 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e28:	2308      	movs	r3, #8
 8000e2a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	69fa      	ldr	r2, [r7, #28]
 8000e30:	611a      	str	r2, [r3, #16]
          break;
 8000e32:	e008      	b.n	8000e46 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e34:	2308      	movs	r3, #8
 8000e36:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	69fa      	ldr	r2, [r7, #28]
 8000e3c:	615a      	str	r2, [r3, #20]
          break;
 8000e3e:	e002      	b.n	8000e46 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e40:	2300      	movs	r3, #0
 8000e42:	623b      	str	r3, [r7, #32]
          break;
 8000e44:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	2bff      	cmp	r3, #255	; 0xff
 8000e4a:	d801      	bhi.n	8000e50 <HAL_GPIO_Init+0xec>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	e001      	b.n	8000e54 <HAL_GPIO_Init+0xf0>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3304      	adds	r3, #4
 8000e54:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e56:	69bb      	ldr	r3, [r7, #24]
 8000e58:	2bff      	cmp	r3, #255	; 0xff
 8000e5a:	d802      	bhi.n	8000e62 <HAL_GPIO_Init+0xfe>
 8000e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	e002      	b.n	8000e68 <HAL_GPIO_Init+0x104>
 8000e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e64:	3b08      	subs	r3, #8
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	210f      	movs	r1, #15
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	fa01 f303 	lsl.w	r3, r1, r3
 8000e76:	43db      	mvns	r3, r3
 8000e78:	401a      	ands	r2, r3
 8000e7a:	6a39      	ldr	r1, [r7, #32]
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e82:	431a      	orrs	r2, r3
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	f000 8096 	beq.w	8000fc2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e96:	4b59      	ldr	r3, [pc, #356]	; (8000ffc <HAL_GPIO_Init+0x298>)
 8000e98:	699b      	ldr	r3, [r3, #24]
 8000e9a:	4a58      	ldr	r2, [pc, #352]	; (8000ffc <HAL_GPIO_Init+0x298>)
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	6193      	str	r3, [r2, #24]
 8000ea2:	4b56      	ldr	r3, [pc, #344]	; (8000ffc <HAL_GPIO_Init+0x298>)
 8000ea4:	699b      	ldr	r3, [r3, #24]
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	60bb      	str	r3, [r7, #8]
 8000eac:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000eae:	4a54      	ldr	r2, [pc, #336]	; (8001000 <HAL_GPIO_Init+0x29c>)
 8000eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb2:	089b      	lsrs	r3, r3, #2
 8000eb4:	3302      	adds	r3, #2
 8000eb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eba:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ebe:	f003 0303 	and.w	r3, r3, #3
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	220f      	movs	r2, #15
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	68fa      	ldr	r2, [r7, #12]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a4b      	ldr	r2, [pc, #300]	; (8001004 <HAL_GPIO_Init+0x2a0>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d013      	beq.n	8000f02 <HAL_GPIO_Init+0x19e>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a4a      	ldr	r2, [pc, #296]	; (8001008 <HAL_GPIO_Init+0x2a4>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d00d      	beq.n	8000efe <HAL_GPIO_Init+0x19a>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a49      	ldr	r2, [pc, #292]	; (800100c <HAL_GPIO_Init+0x2a8>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d007      	beq.n	8000efa <HAL_GPIO_Init+0x196>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a48      	ldr	r2, [pc, #288]	; (8001010 <HAL_GPIO_Init+0x2ac>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d101      	bne.n	8000ef6 <HAL_GPIO_Init+0x192>
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	e006      	b.n	8000f04 <HAL_GPIO_Init+0x1a0>
 8000ef6:	2304      	movs	r3, #4
 8000ef8:	e004      	b.n	8000f04 <HAL_GPIO_Init+0x1a0>
 8000efa:	2302      	movs	r3, #2
 8000efc:	e002      	b.n	8000f04 <HAL_GPIO_Init+0x1a0>
 8000efe:	2301      	movs	r3, #1
 8000f00:	e000      	b.n	8000f04 <HAL_GPIO_Init+0x1a0>
 8000f02:	2300      	movs	r3, #0
 8000f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f06:	f002 0203 	and.w	r2, r2, #3
 8000f0a:	0092      	lsls	r2, r2, #2
 8000f0c:	4093      	lsls	r3, r2
 8000f0e:	68fa      	ldr	r2, [r7, #12]
 8000f10:	4313      	orrs	r3, r2
 8000f12:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f14:	493a      	ldr	r1, [pc, #232]	; (8001000 <HAL_GPIO_Init+0x29c>)
 8000f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f18:	089b      	lsrs	r3, r3, #2
 8000f1a:	3302      	adds	r3, #2
 8000f1c:	68fa      	ldr	r2, [r7, #12]
 8000f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d006      	beq.n	8000f3c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000f2e:	4b39      	ldr	r3, [pc, #228]	; (8001014 <HAL_GPIO_Init+0x2b0>)
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	4938      	ldr	r1, [pc, #224]	; (8001014 <HAL_GPIO_Init+0x2b0>)
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	4313      	orrs	r3, r2
 8000f38:	600b      	str	r3, [r1, #0]
 8000f3a:	e006      	b.n	8000f4a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f3c:	4b35      	ldr	r3, [pc, #212]	; (8001014 <HAL_GPIO_Init+0x2b0>)
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	43db      	mvns	r3, r3
 8000f44:	4933      	ldr	r1, [pc, #204]	; (8001014 <HAL_GPIO_Init+0x2b0>)
 8000f46:	4013      	ands	r3, r2
 8000f48:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d006      	beq.n	8000f64 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f56:	4b2f      	ldr	r3, [pc, #188]	; (8001014 <HAL_GPIO_Init+0x2b0>)
 8000f58:	685a      	ldr	r2, [r3, #4]
 8000f5a:	492e      	ldr	r1, [pc, #184]	; (8001014 <HAL_GPIO_Init+0x2b0>)
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	604b      	str	r3, [r1, #4]
 8000f62:	e006      	b.n	8000f72 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f64:	4b2b      	ldr	r3, [pc, #172]	; (8001014 <HAL_GPIO_Init+0x2b0>)
 8000f66:	685a      	ldr	r2, [r3, #4]
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	4929      	ldr	r1, [pc, #164]	; (8001014 <HAL_GPIO_Init+0x2b0>)
 8000f6e:	4013      	ands	r3, r2
 8000f70:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d006      	beq.n	8000f8c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f7e:	4b25      	ldr	r3, [pc, #148]	; (8001014 <HAL_GPIO_Init+0x2b0>)
 8000f80:	689a      	ldr	r2, [r3, #8]
 8000f82:	4924      	ldr	r1, [pc, #144]	; (8001014 <HAL_GPIO_Init+0x2b0>)
 8000f84:	69bb      	ldr	r3, [r7, #24]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	608b      	str	r3, [r1, #8]
 8000f8a:	e006      	b.n	8000f9a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f8c:	4b21      	ldr	r3, [pc, #132]	; (8001014 <HAL_GPIO_Init+0x2b0>)
 8000f8e:	689a      	ldr	r2, [r3, #8]
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	43db      	mvns	r3, r3
 8000f94:	491f      	ldr	r1, [pc, #124]	; (8001014 <HAL_GPIO_Init+0x2b0>)
 8000f96:	4013      	ands	r3, r2
 8000f98:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d006      	beq.n	8000fb4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000fa6:	4b1b      	ldr	r3, [pc, #108]	; (8001014 <HAL_GPIO_Init+0x2b0>)
 8000fa8:	68da      	ldr	r2, [r3, #12]
 8000faa:	491a      	ldr	r1, [pc, #104]	; (8001014 <HAL_GPIO_Init+0x2b0>)
 8000fac:	69bb      	ldr	r3, [r7, #24]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	60cb      	str	r3, [r1, #12]
 8000fb2:	e006      	b.n	8000fc2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000fb4:	4b17      	ldr	r3, [pc, #92]	; (8001014 <HAL_GPIO_Init+0x2b0>)
 8000fb6:	68da      	ldr	r2, [r3, #12]
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	43db      	mvns	r3, r3
 8000fbc:	4915      	ldr	r1, [pc, #84]	; (8001014 <HAL_GPIO_Init+0x2b0>)
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fce:	fa22 f303 	lsr.w	r3, r2, r3
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	f47f aed0 	bne.w	8000d78 <HAL_GPIO_Init+0x14>
  }
}
 8000fd8:	bf00      	nop
 8000fda:	372c      	adds	r7, #44	; 0x2c
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bc80      	pop	{r7}
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	10210000 	.word	0x10210000
 8000fe8:	10110000 	.word	0x10110000
 8000fec:	10120000 	.word	0x10120000
 8000ff0:	10310000 	.word	0x10310000
 8000ff4:	10320000 	.word	0x10320000
 8000ff8:	10220000 	.word	0x10220000
 8000ffc:	40021000 	.word	0x40021000
 8001000:	40010000 	.word	0x40010000
 8001004:	40010800 	.word	0x40010800
 8001008:	40010c00 	.word	0x40010c00
 800100c:	40011000 	.word	0x40011000
 8001010:	40011400 	.word	0x40011400
 8001014:	40010400 	.word	0x40010400

08001018 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	460b      	mov	r3, r1
 8001022:	807b      	strh	r3, [r7, #2]
 8001024:	4613      	mov	r3, r2
 8001026:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001028:	787b      	ldrb	r3, [r7, #1]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d003      	beq.n	8001036 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800102e:	887a      	ldrh	r2, [r7, #2]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001034:	e003      	b.n	800103e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001036:	887b      	ldrh	r3, [r7, #2]
 8001038:	041a      	lsls	r2, r3, #16
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	611a      	str	r2, [r3, #16]
}
 800103e:	bf00      	nop
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	bc80      	pop	{r7}
 8001046:	4770      	bx	lr

08001048 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b086      	sub	sp, #24
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d101      	bne.n	800105a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e304      	b.n	8001664 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	2b00      	cmp	r3, #0
 8001064:	f000 8087 	beq.w	8001176 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001068:	4b92      	ldr	r3, [pc, #584]	; (80012b4 <HAL_RCC_OscConfig+0x26c>)
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f003 030c 	and.w	r3, r3, #12
 8001070:	2b04      	cmp	r3, #4
 8001072:	d00c      	beq.n	800108e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001074:	4b8f      	ldr	r3, [pc, #572]	; (80012b4 <HAL_RCC_OscConfig+0x26c>)
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f003 030c 	and.w	r3, r3, #12
 800107c:	2b08      	cmp	r3, #8
 800107e:	d112      	bne.n	80010a6 <HAL_RCC_OscConfig+0x5e>
 8001080:	4b8c      	ldr	r3, [pc, #560]	; (80012b4 <HAL_RCC_OscConfig+0x26c>)
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001088:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800108c:	d10b      	bne.n	80010a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800108e:	4b89      	ldr	r3, [pc, #548]	; (80012b4 <HAL_RCC_OscConfig+0x26c>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d06c      	beq.n	8001174 <HAL_RCC_OscConfig+0x12c>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d168      	bne.n	8001174 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
 80010a4:	e2de      	b.n	8001664 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010ae:	d106      	bne.n	80010be <HAL_RCC_OscConfig+0x76>
 80010b0:	4b80      	ldr	r3, [pc, #512]	; (80012b4 <HAL_RCC_OscConfig+0x26c>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a7f      	ldr	r2, [pc, #508]	; (80012b4 <HAL_RCC_OscConfig+0x26c>)
 80010b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010ba:	6013      	str	r3, [r2, #0]
 80010bc:	e02e      	b.n	800111c <HAL_RCC_OscConfig+0xd4>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d10c      	bne.n	80010e0 <HAL_RCC_OscConfig+0x98>
 80010c6:	4b7b      	ldr	r3, [pc, #492]	; (80012b4 <HAL_RCC_OscConfig+0x26c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a7a      	ldr	r2, [pc, #488]	; (80012b4 <HAL_RCC_OscConfig+0x26c>)
 80010cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010d0:	6013      	str	r3, [r2, #0]
 80010d2:	4b78      	ldr	r3, [pc, #480]	; (80012b4 <HAL_RCC_OscConfig+0x26c>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a77      	ldr	r2, [pc, #476]	; (80012b4 <HAL_RCC_OscConfig+0x26c>)
 80010d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010dc:	6013      	str	r3, [r2, #0]
 80010de:	e01d      	b.n	800111c <HAL_RCC_OscConfig+0xd4>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010e8:	d10c      	bne.n	8001104 <HAL_RCC_OscConfig+0xbc>
 80010ea:	4b72      	ldr	r3, [pc, #456]	; (80012b4 <HAL_RCC_OscConfig+0x26c>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a71      	ldr	r2, [pc, #452]	; (80012b4 <HAL_RCC_OscConfig+0x26c>)
 80010f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010f4:	6013      	str	r3, [r2, #0]
 80010f6:	4b6f      	ldr	r3, [pc, #444]	; (80012b4 <HAL_RCC_OscConfig+0x26c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a6e      	ldr	r2, [pc, #440]	; (80012b4 <HAL_RCC_OscConfig+0x26c>)
 80010fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001100:	6013      	str	r3, [r2, #0]
 8001102:	e00b      	b.n	800111c <HAL_RCC_OscConfig+0xd4>
 8001104:	4b6b      	ldr	r3, [pc, #428]	; (80012b4 <HAL_RCC_OscConfig+0x26c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a6a      	ldr	r2, [pc, #424]	; (80012b4 <HAL_RCC_OscConfig+0x26c>)
 800110a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800110e:	6013      	str	r3, [r2, #0]
 8001110:	4b68      	ldr	r3, [pc, #416]	; (80012b4 <HAL_RCC_OscConfig+0x26c>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a67      	ldr	r2, [pc, #412]	; (80012b4 <HAL_RCC_OscConfig+0x26c>)
 8001116:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800111a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d013      	beq.n	800114c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001124:	f7ff fd0e 	bl	8000b44 <HAL_GetTick>
 8001128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800112a:	e008      	b.n	800113e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800112c:	f7ff fd0a 	bl	8000b44 <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	2b64      	cmp	r3, #100	; 0x64
 8001138:	d901      	bls.n	800113e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800113a:	2303      	movs	r3, #3
 800113c:	e292      	b.n	8001664 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800113e:	4b5d      	ldr	r3, [pc, #372]	; (80012b4 <HAL_RCC_OscConfig+0x26c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d0f0      	beq.n	800112c <HAL_RCC_OscConfig+0xe4>
 800114a:	e014      	b.n	8001176 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800114c:	f7ff fcfa 	bl	8000b44 <HAL_GetTick>
 8001150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001152:	e008      	b.n	8001166 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001154:	f7ff fcf6 	bl	8000b44 <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b64      	cmp	r3, #100	; 0x64
 8001160:	d901      	bls.n	8001166 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e27e      	b.n	8001664 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001166:	4b53      	ldr	r3, [pc, #332]	; (80012b4 <HAL_RCC_OscConfig+0x26c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d1f0      	bne.n	8001154 <HAL_RCC_OscConfig+0x10c>
 8001172:	e000      	b.n	8001176 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001174:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	2b00      	cmp	r3, #0
 8001180:	d063      	beq.n	800124a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001182:	4b4c      	ldr	r3, [pc, #304]	; (80012b4 <HAL_RCC_OscConfig+0x26c>)
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f003 030c 	and.w	r3, r3, #12
 800118a:	2b00      	cmp	r3, #0
 800118c:	d00b      	beq.n	80011a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800118e:	4b49      	ldr	r3, [pc, #292]	; (80012b4 <HAL_RCC_OscConfig+0x26c>)
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f003 030c 	and.w	r3, r3, #12
 8001196:	2b08      	cmp	r3, #8
 8001198:	d11c      	bne.n	80011d4 <HAL_RCC_OscConfig+0x18c>
 800119a:	4b46      	ldr	r3, [pc, #280]	; (80012b4 <HAL_RCC_OscConfig+0x26c>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d116      	bne.n	80011d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011a6:	4b43      	ldr	r3, [pc, #268]	; (80012b4 <HAL_RCC_OscConfig+0x26c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d005      	beq.n	80011be <HAL_RCC_OscConfig+0x176>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	695b      	ldr	r3, [r3, #20]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d001      	beq.n	80011be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e252      	b.n	8001664 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011be:	4b3d      	ldr	r3, [pc, #244]	; (80012b4 <HAL_RCC_OscConfig+0x26c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	699b      	ldr	r3, [r3, #24]
 80011ca:	00db      	lsls	r3, r3, #3
 80011cc:	4939      	ldr	r1, [pc, #228]	; (80012b4 <HAL_RCC_OscConfig+0x26c>)
 80011ce:	4313      	orrs	r3, r2
 80011d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011d2:	e03a      	b.n	800124a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	695b      	ldr	r3, [r3, #20]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d020      	beq.n	800121e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011dc:	4b36      	ldr	r3, [pc, #216]	; (80012b8 <HAL_RCC_OscConfig+0x270>)
 80011de:	2201      	movs	r2, #1
 80011e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e2:	f7ff fcaf 	bl	8000b44 <HAL_GetTick>
 80011e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011e8:	e008      	b.n	80011fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011ea:	f7ff fcab 	bl	8000b44 <HAL_GetTick>
 80011ee:	4602      	mov	r2, r0
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d901      	bls.n	80011fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80011f8:	2303      	movs	r3, #3
 80011fa:	e233      	b.n	8001664 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011fc:	4b2d      	ldr	r3, [pc, #180]	; (80012b4 <HAL_RCC_OscConfig+0x26c>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 0302 	and.w	r3, r3, #2
 8001204:	2b00      	cmp	r3, #0
 8001206:	d0f0      	beq.n	80011ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001208:	4b2a      	ldr	r3, [pc, #168]	; (80012b4 <HAL_RCC_OscConfig+0x26c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	00db      	lsls	r3, r3, #3
 8001216:	4927      	ldr	r1, [pc, #156]	; (80012b4 <HAL_RCC_OscConfig+0x26c>)
 8001218:	4313      	orrs	r3, r2
 800121a:	600b      	str	r3, [r1, #0]
 800121c:	e015      	b.n	800124a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800121e:	4b26      	ldr	r3, [pc, #152]	; (80012b8 <HAL_RCC_OscConfig+0x270>)
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001224:	f7ff fc8e 	bl	8000b44 <HAL_GetTick>
 8001228:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800122a:	e008      	b.n	800123e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800122c:	f7ff fc8a 	bl	8000b44 <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	2b02      	cmp	r3, #2
 8001238:	d901      	bls.n	800123e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e212      	b.n	8001664 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800123e:	4b1d      	ldr	r3, [pc, #116]	; (80012b4 <HAL_RCC_OscConfig+0x26c>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	2b00      	cmp	r3, #0
 8001248:	d1f0      	bne.n	800122c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0308 	and.w	r3, r3, #8
 8001252:	2b00      	cmp	r3, #0
 8001254:	d03a      	beq.n	80012cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	69db      	ldr	r3, [r3, #28]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d019      	beq.n	8001292 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800125e:	4b17      	ldr	r3, [pc, #92]	; (80012bc <HAL_RCC_OscConfig+0x274>)
 8001260:	2201      	movs	r2, #1
 8001262:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001264:	f7ff fc6e 	bl	8000b44 <HAL_GetTick>
 8001268:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800126a:	e008      	b.n	800127e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800126c:	f7ff fc6a 	bl	8000b44 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b02      	cmp	r3, #2
 8001278:	d901      	bls.n	800127e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e1f2      	b.n	8001664 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800127e:	4b0d      	ldr	r3, [pc, #52]	; (80012b4 <HAL_RCC_OscConfig+0x26c>)
 8001280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001282:	f003 0302 	and.w	r3, r3, #2
 8001286:	2b00      	cmp	r3, #0
 8001288:	d0f0      	beq.n	800126c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800128a:	2001      	movs	r0, #1
 800128c:	f000 fbc0 	bl	8001a10 <RCC_Delay>
 8001290:	e01c      	b.n	80012cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001292:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <HAL_RCC_OscConfig+0x274>)
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001298:	f7ff fc54 	bl	8000b44 <HAL_GetTick>
 800129c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800129e:	e00f      	b.n	80012c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012a0:	f7ff fc50 	bl	8000b44 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	d908      	bls.n	80012c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e1d8      	b.n	8001664 <HAL_RCC_OscConfig+0x61c>
 80012b2:	bf00      	nop
 80012b4:	40021000 	.word	0x40021000
 80012b8:	42420000 	.word	0x42420000
 80012bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012c0:	4b9b      	ldr	r3, [pc, #620]	; (8001530 <HAL_RCC_OscConfig+0x4e8>)
 80012c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c4:	f003 0302 	and.w	r3, r3, #2
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d1e9      	bne.n	80012a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 0304 	and.w	r3, r3, #4
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	f000 80a6 	beq.w	8001426 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012da:	2300      	movs	r3, #0
 80012dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012de:	4b94      	ldr	r3, [pc, #592]	; (8001530 <HAL_RCC_OscConfig+0x4e8>)
 80012e0:	69db      	ldr	r3, [r3, #28]
 80012e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d10d      	bne.n	8001306 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012ea:	4b91      	ldr	r3, [pc, #580]	; (8001530 <HAL_RCC_OscConfig+0x4e8>)
 80012ec:	69db      	ldr	r3, [r3, #28]
 80012ee:	4a90      	ldr	r2, [pc, #576]	; (8001530 <HAL_RCC_OscConfig+0x4e8>)
 80012f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f4:	61d3      	str	r3, [r2, #28]
 80012f6:	4b8e      	ldr	r3, [pc, #568]	; (8001530 <HAL_RCC_OscConfig+0x4e8>)
 80012f8:	69db      	ldr	r3, [r3, #28]
 80012fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fe:	60bb      	str	r3, [r7, #8]
 8001300:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001302:	2301      	movs	r3, #1
 8001304:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001306:	4b8b      	ldr	r3, [pc, #556]	; (8001534 <HAL_RCC_OscConfig+0x4ec>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800130e:	2b00      	cmp	r3, #0
 8001310:	d118      	bne.n	8001344 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001312:	4b88      	ldr	r3, [pc, #544]	; (8001534 <HAL_RCC_OscConfig+0x4ec>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a87      	ldr	r2, [pc, #540]	; (8001534 <HAL_RCC_OscConfig+0x4ec>)
 8001318:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800131c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800131e:	f7ff fc11 	bl	8000b44 <HAL_GetTick>
 8001322:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001324:	e008      	b.n	8001338 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001326:	f7ff fc0d 	bl	8000b44 <HAL_GetTick>
 800132a:	4602      	mov	r2, r0
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	2b64      	cmp	r3, #100	; 0x64
 8001332:	d901      	bls.n	8001338 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	e195      	b.n	8001664 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001338:	4b7e      	ldr	r3, [pc, #504]	; (8001534 <HAL_RCC_OscConfig+0x4ec>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001340:	2b00      	cmp	r3, #0
 8001342:	d0f0      	beq.n	8001326 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	691b      	ldr	r3, [r3, #16]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d106      	bne.n	800135a <HAL_RCC_OscConfig+0x312>
 800134c:	4b78      	ldr	r3, [pc, #480]	; (8001530 <HAL_RCC_OscConfig+0x4e8>)
 800134e:	6a1b      	ldr	r3, [r3, #32]
 8001350:	4a77      	ldr	r2, [pc, #476]	; (8001530 <HAL_RCC_OscConfig+0x4e8>)
 8001352:	f043 0301 	orr.w	r3, r3, #1
 8001356:	6213      	str	r3, [r2, #32]
 8001358:	e02d      	b.n	80013b6 <HAL_RCC_OscConfig+0x36e>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	691b      	ldr	r3, [r3, #16]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d10c      	bne.n	800137c <HAL_RCC_OscConfig+0x334>
 8001362:	4b73      	ldr	r3, [pc, #460]	; (8001530 <HAL_RCC_OscConfig+0x4e8>)
 8001364:	6a1b      	ldr	r3, [r3, #32]
 8001366:	4a72      	ldr	r2, [pc, #456]	; (8001530 <HAL_RCC_OscConfig+0x4e8>)
 8001368:	f023 0301 	bic.w	r3, r3, #1
 800136c:	6213      	str	r3, [r2, #32]
 800136e:	4b70      	ldr	r3, [pc, #448]	; (8001530 <HAL_RCC_OscConfig+0x4e8>)
 8001370:	6a1b      	ldr	r3, [r3, #32]
 8001372:	4a6f      	ldr	r2, [pc, #444]	; (8001530 <HAL_RCC_OscConfig+0x4e8>)
 8001374:	f023 0304 	bic.w	r3, r3, #4
 8001378:	6213      	str	r3, [r2, #32]
 800137a:	e01c      	b.n	80013b6 <HAL_RCC_OscConfig+0x36e>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	691b      	ldr	r3, [r3, #16]
 8001380:	2b05      	cmp	r3, #5
 8001382:	d10c      	bne.n	800139e <HAL_RCC_OscConfig+0x356>
 8001384:	4b6a      	ldr	r3, [pc, #424]	; (8001530 <HAL_RCC_OscConfig+0x4e8>)
 8001386:	6a1b      	ldr	r3, [r3, #32]
 8001388:	4a69      	ldr	r2, [pc, #420]	; (8001530 <HAL_RCC_OscConfig+0x4e8>)
 800138a:	f043 0304 	orr.w	r3, r3, #4
 800138e:	6213      	str	r3, [r2, #32]
 8001390:	4b67      	ldr	r3, [pc, #412]	; (8001530 <HAL_RCC_OscConfig+0x4e8>)
 8001392:	6a1b      	ldr	r3, [r3, #32]
 8001394:	4a66      	ldr	r2, [pc, #408]	; (8001530 <HAL_RCC_OscConfig+0x4e8>)
 8001396:	f043 0301 	orr.w	r3, r3, #1
 800139a:	6213      	str	r3, [r2, #32]
 800139c:	e00b      	b.n	80013b6 <HAL_RCC_OscConfig+0x36e>
 800139e:	4b64      	ldr	r3, [pc, #400]	; (8001530 <HAL_RCC_OscConfig+0x4e8>)
 80013a0:	6a1b      	ldr	r3, [r3, #32]
 80013a2:	4a63      	ldr	r2, [pc, #396]	; (8001530 <HAL_RCC_OscConfig+0x4e8>)
 80013a4:	f023 0301 	bic.w	r3, r3, #1
 80013a8:	6213      	str	r3, [r2, #32]
 80013aa:	4b61      	ldr	r3, [pc, #388]	; (8001530 <HAL_RCC_OscConfig+0x4e8>)
 80013ac:	6a1b      	ldr	r3, [r3, #32]
 80013ae:	4a60      	ldr	r2, [pc, #384]	; (8001530 <HAL_RCC_OscConfig+0x4e8>)
 80013b0:	f023 0304 	bic.w	r3, r3, #4
 80013b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	691b      	ldr	r3, [r3, #16]
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d015      	beq.n	80013ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013be:	f7ff fbc1 	bl	8000b44 <HAL_GetTick>
 80013c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013c4:	e00a      	b.n	80013dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013c6:	f7ff fbbd 	bl	8000b44 <HAL_GetTick>
 80013ca:	4602      	mov	r2, r0
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d901      	bls.n	80013dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e143      	b.n	8001664 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013dc:	4b54      	ldr	r3, [pc, #336]	; (8001530 <HAL_RCC_OscConfig+0x4e8>)
 80013de:	6a1b      	ldr	r3, [r3, #32]
 80013e0:	f003 0302 	and.w	r3, r3, #2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d0ee      	beq.n	80013c6 <HAL_RCC_OscConfig+0x37e>
 80013e8:	e014      	b.n	8001414 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ea:	f7ff fbab 	bl	8000b44 <HAL_GetTick>
 80013ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013f0:	e00a      	b.n	8001408 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013f2:	f7ff fba7 	bl	8000b44 <HAL_GetTick>
 80013f6:	4602      	mov	r2, r0
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001400:	4293      	cmp	r3, r2
 8001402:	d901      	bls.n	8001408 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001404:	2303      	movs	r3, #3
 8001406:	e12d      	b.n	8001664 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001408:	4b49      	ldr	r3, [pc, #292]	; (8001530 <HAL_RCC_OscConfig+0x4e8>)
 800140a:	6a1b      	ldr	r3, [r3, #32]
 800140c:	f003 0302 	and.w	r3, r3, #2
 8001410:	2b00      	cmp	r3, #0
 8001412:	d1ee      	bne.n	80013f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001414:	7dfb      	ldrb	r3, [r7, #23]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d105      	bne.n	8001426 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800141a:	4b45      	ldr	r3, [pc, #276]	; (8001530 <HAL_RCC_OscConfig+0x4e8>)
 800141c:	69db      	ldr	r3, [r3, #28]
 800141e:	4a44      	ldr	r2, [pc, #272]	; (8001530 <HAL_RCC_OscConfig+0x4e8>)
 8001420:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001424:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800142a:	2b00      	cmp	r3, #0
 800142c:	f000 808c 	beq.w	8001548 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001430:	4b3f      	ldr	r3, [pc, #252]	; (8001530 <HAL_RCC_OscConfig+0x4e8>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800143c:	d10e      	bne.n	800145c <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 800143e:	4b3c      	ldr	r3, [pc, #240]	; (8001530 <HAL_RCC_OscConfig+0x4e8>)
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001446:	2b08      	cmp	r3, #8
 8001448:	d108      	bne.n	800145c <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 800144a:	4b39      	ldr	r3, [pc, #228]	; (8001530 <HAL_RCC_OscConfig+0x4e8>)
 800144c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800144e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001452:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001456:	d101      	bne.n	800145c <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e103      	b.n	8001664 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001460:	2b02      	cmp	r3, #2
 8001462:	d14e      	bne.n	8001502 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8001464:	4b32      	ldr	r3, [pc, #200]	; (8001530 <HAL_RCC_OscConfig+0x4e8>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d009      	beq.n	8001484 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8001470:	4b2f      	ldr	r3, [pc, #188]	; (8001530 <HAL_RCC_OscConfig+0x4e8>)
 8001472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001474:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 800147c:	429a      	cmp	r2, r3
 800147e:	d001      	beq.n	8001484 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e0ef      	b.n	8001664 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8001484:	4b2c      	ldr	r3, [pc, #176]	; (8001538 <HAL_RCC_OscConfig+0x4f0>)
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800148a:	f7ff fb5b 	bl	8000b44 <HAL_GetTick>
 800148e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001490:	e008      	b.n	80014a4 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001492:	f7ff fb57 	bl	8000b44 <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	2b64      	cmp	r3, #100	; 0x64
 800149e:	d901      	bls.n	80014a4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e0df      	b.n	8001664 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80014a4:	4b22      	ldr	r3, [pc, #136]	; (8001530 <HAL_RCC_OscConfig+0x4e8>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d1f0      	bne.n	8001492 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 80014b0:	4b1f      	ldr	r3, [pc, #124]	; (8001530 <HAL_RCC_OscConfig+0x4e8>)
 80014b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014bc:	491c      	ldr	r1, [pc, #112]	; (8001530 <HAL_RCC_OscConfig+0x4e8>)
 80014be:	4313      	orrs	r3, r2
 80014c0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 80014c2:	4b1b      	ldr	r3, [pc, #108]	; (8001530 <HAL_RCC_OscConfig+0x4e8>)
 80014c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	4918      	ldr	r1, [pc, #96]	; (8001530 <HAL_RCC_OscConfig+0x4e8>)
 80014d0:	4313      	orrs	r3, r2
 80014d2:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 80014d4:	4b18      	ldr	r3, [pc, #96]	; (8001538 <HAL_RCC_OscConfig+0x4f0>)
 80014d6:	2201      	movs	r2, #1
 80014d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014da:	f7ff fb33 	bl	8000b44 <HAL_GetTick>
 80014de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80014e0:	e008      	b.n	80014f4 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80014e2:	f7ff fb2f 	bl	8000b44 <HAL_GetTick>
 80014e6:	4602      	mov	r2, r0
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	1ad3      	subs	r3, r2, r3
 80014ec:	2b64      	cmp	r3, #100	; 0x64
 80014ee:	d901      	bls.n	80014f4 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e0b7      	b.n	8001664 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 80014f4:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <HAL_RCC_OscConfig+0x4e8>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d0f0      	beq.n	80014e2 <HAL_RCC_OscConfig+0x49a>
 8001500:	e022      	b.n	8001548 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8001502:	4b0b      	ldr	r3, [pc, #44]	; (8001530 <HAL_RCC_OscConfig+0x4e8>)
 8001504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001506:	4a0a      	ldr	r2, [pc, #40]	; (8001530 <HAL_RCC_OscConfig+0x4e8>)
 8001508:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800150c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 800150e:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <HAL_RCC_OscConfig+0x4f0>)
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001514:	f7ff fb16 	bl	8000b44 <HAL_GetTick>
 8001518:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 800151a:	e00f      	b.n	800153c <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800151c:	f7ff fb12 	bl	8000b44 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b64      	cmp	r3, #100	; 0x64
 8001528:	d908      	bls.n	800153c <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e09a      	b.n	8001664 <HAL_RCC_OscConfig+0x61c>
 800152e:	bf00      	nop
 8001530:	40021000 	.word	0x40021000
 8001534:	40007000 	.word	0x40007000
 8001538:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 800153c:	4b4b      	ldr	r3, [pc, #300]	; (800166c <HAL_RCC_OscConfig+0x624>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d1e9      	bne.n	800151c <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6a1b      	ldr	r3, [r3, #32]
 800154c:	2b00      	cmp	r3, #0
 800154e:	f000 8088 	beq.w	8001662 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001552:	4b46      	ldr	r3, [pc, #280]	; (800166c <HAL_RCC_OscConfig+0x624>)
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f003 030c 	and.w	r3, r3, #12
 800155a:	2b08      	cmp	r3, #8
 800155c:	d068      	beq.n	8001630 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a1b      	ldr	r3, [r3, #32]
 8001562:	2b02      	cmp	r3, #2
 8001564:	d14d      	bne.n	8001602 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001566:	4b42      	ldr	r3, [pc, #264]	; (8001670 <HAL_RCC_OscConfig+0x628>)
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156c:	f7ff faea 	bl	8000b44 <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001572:	e008      	b.n	8001586 <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001574:	f7ff fae6 	bl	8000b44 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b02      	cmp	r3, #2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e06e      	b.n	8001664 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001586:	4b39      	ldr	r3, [pc, #228]	; (800166c <HAL_RCC_OscConfig+0x624>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1f0      	bne.n	8001574 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001596:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800159a:	d10f      	bne.n	80015bc <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 800159c:	4b33      	ldr	r3, [pc, #204]	; (800166c <HAL_RCC_OscConfig+0x624>)
 800159e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	4931      	ldr	r1, [pc, #196]	; (800166c <HAL_RCC_OscConfig+0x624>)
 80015a6:	4313      	orrs	r3, r2
 80015a8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015aa:	4b30      	ldr	r3, [pc, #192]	; (800166c <HAL_RCC_OscConfig+0x624>)
 80015ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ae:	f023 020f 	bic.w	r2, r3, #15
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	492d      	ldr	r1, [pc, #180]	; (800166c <HAL_RCC_OscConfig+0x624>)
 80015b8:	4313      	orrs	r3, r2
 80015ba:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015bc:	4b2b      	ldr	r3, [pc, #172]	; (800166c <HAL_RCC_OscConfig+0x624>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015cc:	430b      	orrs	r3, r1
 80015ce:	4927      	ldr	r1, [pc, #156]	; (800166c <HAL_RCC_OscConfig+0x624>)
 80015d0:	4313      	orrs	r3, r2
 80015d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015d4:	4b26      	ldr	r3, [pc, #152]	; (8001670 <HAL_RCC_OscConfig+0x628>)
 80015d6:	2201      	movs	r2, #1
 80015d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015da:	f7ff fab3 	bl	8000b44 <HAL_GetTick>
 80015de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015e0:	e008      	b.n	80015f4 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015e2:	f7ff faaf 	bl	8000b44 <HAL_GetTick>
 80015e6:	4602      	mov	r2, r0
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d901      	bls.n	80015f4 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e037      	b.n	8001664 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015f4:	4b1d      	ldr	r3, [pc, #116]	; (800166c <HAL_RCC_OscConfig+0x624>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d0f0      	beq.n	80015e2 <HAL_RCC_OscConfig+0x59a>
 8001600:	e02f      	b.n	8001662 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001602:	4b1b      	ldr	r3, [pc, #108]	; (8001670 <HAL_RCC_OscConfig+0x628>)
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001608:	f7ff fa9c 	bl	8000b44 <HAL_GetTick>
 800160c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001610:	f7ff fa98 	bl	8000b44 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e020      	b.n	8001664 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001622:	4b12      	ldr	r3, [pc, #72]	; (800166c <HAL_RCC_OscConfig+0x624>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1f0      	bne.n	8001610 <HAL_RCC_OscConfig+0x5c8>
 800162e:	e018      	b.n	8001662 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a1b      	ldr	r3, [r3, #32]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d101      	bne.n	800163c <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e013      	b.n	8001664 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800163c:	4b0b      	ldr	r3, [pc, #44]	; (800166c <HAL_RCC_OscConfig+0x624>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164c:	429a      	cmp	r2, r3
 800164e:	d106      	bne.n	800165e <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800165a:	429a      	cmp	r2, r3
 800165c:	d001      	beq.n	8001662 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e000      	b.n	8001664 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8001662:	2300      	movs	r3, #0
}
 8001664:	4618      	mov	r0, r3
 8001666:	3718      	adds	r7, #24
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40021000 	.word	0x40021000
 8001670:	42420060 	.word	0x42420060

08001674 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d101      	bne.n	8001688 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	e0d0      	b.n	800182a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001688:	4b6a      	ldr	r3, [pc, #424]	; (8001834 <HAL_RCC_ClockConfig+0x1c0>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0307 	and.w	r3, r3, #7
 8001690:	683a      	ldr	r2, [r7, #0]
 8001692:	429a      	cmp	r2, r3
 8001694:	d910      	bls.n	80016b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001696:	4b67      	ldr	r3, [pc, #412]	; (8001834 <HAL_RCC_ClockConfig+0x1c0>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f023 0207 	bic.w	r2, r3, #7
 800169e:	4965      	ldr	r1, [pc, #404]	; (8001834 <HAL_RCC_ClockConfig+0x1c0>)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016a6:	4b63      	ldr	r3, [pc, #396]	; (8001834 <HAL_RCC_ClockConfig+0x1c0>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	683a      	ldr	r2, [r7, #0]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d001      	beq.n	80016b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e0b8      	b.n	800182a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d020      	beq.n	8001706 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0304 	and.w	r3, r3, #4
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d005      	beq.n	80016dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016d0:	4b59      	ldr	r3, [pc, #356]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	4a58      	ldr	r2, [pc, #352]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 80016d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80016da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0308 	and.w	r3, r3, #8
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d005      	beq.n	80016f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016e8:	4b53      	ldr	r3, [pc, #332]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	4a52      	ldr	r2, [pc, #328]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 80016ee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80016f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016f4:	4b50      	ldr	r3, [pc, #320]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	494d      	ldr	r1, [pc, #308]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 8001702:	4313      	orrs	r3, r2
 8001704:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	2b00      	cmp	r3, #0
 8001710:	d040      	beq.n	8001794 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d107      	bne.n	800172a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800171a:	4b47      	ldr	r3, [pc, #284]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d115      	bne.n	8001752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e07f      	b.n	800182a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	2b02      	cmp	r3, #2
 8001730:	d107      	bne.n	8001742 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001732:	4b41      	ldr	r3, [pc, #260]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d109      	bne.n	8001752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e073      	b.n	800182a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001742:	4b3d      	ldr	r3, [pc, #244]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0302 	and.w	r3, r3, #2
 800174a:	2b00      	cmp	r3, #0
 800174c:	d101      	bne.n	8001752 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e06b      	b.n	800182a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001752:	4b39      	ldr	r3, [pc, #228]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f023 0203 	bic.w	r2, r3, #3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	4936      	ldr	r1, [pc, #216]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 8001760:	4313      	orrs	r3, r2
 8001762:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001764:	f7ff f9ee 	bl	8000b44 <HAL_GetTick>
 8001768:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800176a:	e00a      	b.n	8001782 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800176c:	f7ff f9ea 	bl	8000b44 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	f241 3288 	movw	r2, #5000	; 0x1388
 800177a:	4293      	cmp	r3, r2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e053      	b.n	800182a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001782:	4b2d      	ldr	r3, [pc, #180]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f003 020c 	and.w	r2, r3, #12
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	429a      	cmp	r2, r3
 8001792:	d1eb      	bne.n	800176c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001794:	4b27      	ldr	r3, [pc, #156]	; (8001834 <HAL_RCC_ClockConfig+0x1c0>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0307 	and.w	r3, r3, #7
 800179c:	683a      	ldr	r2, [r7, #0]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d210      	bcs.n	80017c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017a2:	4b24      	ldr	r3, [pc, #144]	; (8001834 <HAL_RCC_ClockConfig+0x1c0>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f023 0207 	bic.w	r2, r3, #7
 80017aa:	4922      	ldr	r1, [pc, #136]	; (8001834 <HAL_RCC_ClockConfig+0x1c0>)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017b2:	4b20      	ldr	r3, [pc, #128]	; (8001834 <HAL_RCC_ClockConfig+0x1c0>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	683a      	ldr	r2, [r7, #0]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d001      	beq.n	80017c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e032      	b.n	800182a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0304 	and.w	r3, r3, #4
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d008      	beq.n	80017e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017d0:	4b19      	ldr	r3, [pc, #100]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	4916      	ldr	r1, [pc, #88]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 80017de:	4313      	orrs	r3, r2
 80017e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0308 	and.w	r3, r3, #8
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d009      	beq.n	8001802 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017ee:	4b12      	ldr	r3, [pc, #72]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	691b      	ldr	r3, [r3, #16]
 80017fa:	00db      	lsls	r3, r3, #3
 80017fc:	490e      	ldr	r1, [pc, #56]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001802:	f000 f821 	bl	8001848 <HAL_RCC_GetSysClockFreq>
 8001806:	4601      	mov	r1, r0
 8001808:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <HAL_RCC_ClockConfig+0x1c4>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	091b      	lsrs	r3, r3, #4
 800180e:	f003 030f 	and.w	r3, r3, #15
 8001812:	4a0a      	ldr	r2, [pc, #40]	; (800183c <HAL_RCC_ClockConfig+0x1c8>)
 8001814:	5cd3      	ldrb	r3, [r2, r3]
 8001816:	fa21 f303 	lsr.w	r3, r1, r3
 800181a:	4a09      	ldr	r2, [pc, #36]	; (8001840 <HAL_RCC_ClockConfig+0x1cc>)
 800181c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800181e:	4b09      	ldr	r3, [pc, #36]	; (8001844 <HAL_RCC_ClockConfig+0x1d0>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff f94c 	bl	8000ac0 <HAL_InitTick>

  return HAL_OK;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	3710      	adds	r7, #16
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40022000 	.word	0x40022000
 8001838:	40021000 	.word	0x40021000
 800183c:	08002510 	.word	0x08002510
 8001840:	20000000 	.word	0x20000000
 8001844:	20000004 	.word	0x20000004

08001848 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001848:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800184c:	b091      	sub	sp, #68	; 0x44
 800184e:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8001850:	4b6a      	ldr	r3, [pc, #424]	; (80019fc <HAL_RCC_GetSysClockFreq+0x1b4>)
 8001852:	f107 0414 	add.w	r4, r7, #20
 8001856:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001858:	c407      	stmia	r4!, {r0, r1, r2}
 800185a:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 800185c:	4b68      	ldr	r3, [pc, #416]	; (8001a00 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800185e:	1d3c      	adds	r4, r7, #4
 8001860:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001862:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001866:	2300      	movs	r3, #0
 8001868:	637b      	str	r3, [r7, #52]	; 0x34
 800186a:	2300      	movs	r3, #0
 800186c:	633b      	str	r3, [r7, #48]	; 0x30
 800186e:	2300      	movs	r3, #0
 8001870:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001872:	2300      	movs	r3, #0
 8001874:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 8001876:	2300      	movs	r3, #0
 8001878:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 800187a:	2300      	movs	r3, #0
 800187c:	62bb      	str	r3, [r7, #40]	; 0x28
 800187e:	2300      	movs	r3, #0
 8001880:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001882:	4b60      	ldr	r3, [pc, #384]	; (8001a04 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800188a:	f003 030c 	and.w	r3, r3, #12
 800188e:	2b04      	cmp	r3, #4
 8001890:	d002      	beq.n	8001898 <HAL_RCC_GetSysClockFreq+0x50>
 8001892:	2b08      	cmp	r3, #8
 8001894:	d003      	beq.n	800189e <HAL_RCC_GetSysClockFreq+0x56>
 8001896:	e0a7      	b.n	80019e8 <HAL_RCC_GetSysClockFreq+0x1a0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001898:	4b5b      	ldr	r3, [pc, #364]	; (8001a08 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800189a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800189c:	e0a7      	b.n	80019ee <HAL_RCC_GetSysClockFreq+0x1a6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800189e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018a0:	0c9b      	lsrs	r3, r3, #18
 80018a2:	f003 030f 	and.w	r3, r3, #15
 80018a6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80018aa:	4413      	add	r3, r2
 80018ac:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80018b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80018b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	f000 808d 	beq.w	80019d8 <HAL_RCC_GetSysClockFreq+0x190>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 80018be:	4b51      	ldr	r3, [pc, #324]	; (8001a04 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80018c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c2:	f003 030f 	and.w	r3, r3, #15
 80018c6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80018ca:	4413      	add	r3, r2
 80018cc:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 80018d0:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 80018d2:	4b4c      	ldr	r3, [pc, #304]	; (8001a04 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80018d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d06a      	beq.n	80019b4 <HAL_RCC_GetSysClockFreq+0x16c>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 80018de:	4b49      	ldr	r3, [pc, #292]	; (8001a04 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80018e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e2:	091b      	lsrs	r3, r3, #4
 80018e4:	f003 030f 	and.w	r3, r3, #15
 80018e8:	3301      	adds	r3, #1
 80018ea:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 80018ec:	4b45      	ldr	r3, [pc, #276]	; (8001a04 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80018ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f0:	0a1b      	lsrs	r3, r3, #8
 80018f2:	f003 030f 	and.w	r3, r3, #15
 80018f6:	3302      	adds	r3, #2
 80018f8:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 80018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fc:	4619      	mov	r1, r3
 80018fe:	f04f 0200 	mov.w	r2, #0
 8001902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001904:	f04f 0400 	mov.w	r4, #0
 8001908:	fb03 f502 	mul.w	r5, r3, r2
 800190c:	fb01 f004 	mul.w	r0, r1, r4
 8001910:	4428      	add	r0, r5
 8001912:	fba1 5603 	umull	r5, r6, r1, r3
 8001916:	1983      	adds	r3, r0, r6
 8001918:	461e      	mov	r6, r3
 800191a:	4629      	mov	r1, r5
 800191c:	4632      	mov	r2, r6
 800191e:	f04f 0300 	mov.w	r3, #0
 8001922:	f04f 0400 	mov.w	r4, #0
 8001926:	0154      	lsls	r4, r2, #5
 8001928:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800192c:	014b      	lsls	r3, r1, #5
 800192e:	4619      	mov	r1, r3
 8001930:	4622      	mov	r2, r4
 8001932:	1b49      	subs	r1, r1, r5
 8001934:	eb62 0206 	sbc.w	r2, r2, r6
 8001938:	f04f 0300 	mov.w	r3, #0
 800193c:	f04f 0400 	mov.w	r4, #0
 8001940:	0194      	lsls	r4, r2, #6
 8001942:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001946:	018b      	lsls	r3, r1, #6
 8001948:	1a5b      	subs	r3, r3, r1
 800194a:	eb64 0402 	sbc.w	r4, r4, r2
 800194e:	f04f 0100 	mov.w	r1, #0
 8001952:	f04f 0200 	mov.w	r2, #0
 8001956:	00e2      	lsls	r2, r4, #3
 8001958:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800195c:	00d9      	lsls	r1, r3, #3
 800195e:	460b      	mov	r3, r1
 8001960:	4614      	mov	r4, r2
 8001962:	195b      	adds	r3, r3, r5
 8001964:	eb44 0406 	adc.w	r4, r4, r6
 8001968:	f04f 0100 	mov.w	r1, #0
 800196c:	f04f 0200 	mov.w	r2, #0
 8001970:	0262      	lsls	r2, r4, #9
 8001972:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001976:	0259      	lsls	r1, r3, #9
 8001978:	460b      	mov	r3, r1
 800197a:	4614      	mov	r4, r2
 800197c:	4698      	mov	r8, r3
 800197e:	46a1      	mov	r9, r4
 8001980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001982:	4619      	mov	r1, r3
 8001984:	f04f 0200 	mov.w	r2, #0
 8001988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800198a:	f04f 0400 	mov.w	r4, #0
 800198e:	fb03 f502 	mul.w	r5, r3, r2
 8001992:	fb01 f004 	mul.w	r0, r1, r4
 8001996:	4428      	add	r0, r5
 8001998:	fba1 3403 	umull	r3, r4, r1, r3
 800199c:	1902      	adds	r2, r0, r4
 800199e:	4614      	mov	r4, r2
 80019a0:	461a      	mov	r2, r3
 80019a2:	4623      	mov	r3, r4
 80019a4:	4640      	mov	r0, r8
 80019a6:	4649      	mov	r1, r9
 80019a8:	f7fe fc3c 	bl	8000224 <__aeabi_uldivmod>
 80019ac:	4603      	mov	r3, r0
 80019ae:	460c      	mov	r4, r1
 80019b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019b2:	e007      	b.n	80019c4 <HAL_RCC_GetSysClockFreq+0x17c>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 80019b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019b6:	4a14      	ldr	r2, [pc, #80]	; (8001a08 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80019b8:	fb02 f203 	mul.w	r2, r2, r3
 80019bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019be:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80019c4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80019c8:	461a      	mov	r2, r3
 80019ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d108      	bne.n	80019e2 <HAL_RCC_GetSysClockFreq+0x19a>
        {
          pllclk = pllclk / 2;
 80019d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019d2:	085b      	lsrs	r3, r3, #1
 80019d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019d6:	e004      	b.n	80019e2 <HAL_RCC_GetSysClockFreq+0x19a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019da:	4a0c      	ldr	r2, [pc, #48]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x1c4>)
 80019dc:	fb02 f303 	mul.w	r3, r2, r3
 80019e0:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 80019e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019e4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80019e6:	e002      	b.n	80019ee <HAL_RCC_GetSysClockFreq+0x1a6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019e8:	4b07      	ldr	r3, [pc, #28]	; (8001a08 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80019ea:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80019ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3744      	adds	r7, #68	; 0x44
 80019f4:	46bd      	mov	sp, r7
 80019f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80019fa:	bf00      	nop
 80019fc:	080024f0 	.word	0x080024f0
 8001a00:	08002500 	.word	0x08002500
 8001a04:	40021000 	.word	0x40021000
 8001a08:	007a1200 	.word	0x007a1200
 8001a0c:	003d0900 	.word	0x003d0900

08001a10 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a18:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <RCC_Delay+0x34>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a0a      	ldr	r2, [pc, #40]	; (8001a48 <RCC_Delay+0x38>)
 8001a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a22:	0a5b      	lsrs	r3, r3, #9
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	fb02 f303 	mul.w	r3, r2, r3
 8001a2a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a2c:	bf00      	nop
  }
  while (Delay --);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	1e5a      	subs	r2, r3, #1
 8001a32:	60fa      	str	r2, [r7, #12]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d1f9      	bne.n	8001a2c <RCC_Delay+0x1c>
}
 8001a38:	bf00      	nop
 8001a3a:	3714      	adds	r7, #20
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bc80      	pop	{r7}
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	20000000 	.word	0x20000000
 8001a48:	10624dd3 	.word	0x10624dd3

08001a4c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d101      	bne.n	8001a5e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e053      	b.n	8001b06 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2200      	movs	r2, #0
 8001a62:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d106      	bne.n	8001a7e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f7fe ff33 	bl	80008e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2202      	movs	r2, #2
 8001a82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a94:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685a      	ldr	r2, [r3, #4]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	431a      	orrs	r2, r3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	431a      	orrs	r2, r3
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	691b      	ldr	r3, [r3, #16]
 8001aaa:	431a      	orrs	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	695b      	ldr	r3, [r3, #20]
 8001ab0:	431a      	orrs	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001aba:	431a      	orrs	r2, r3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	69db      	ldr	r3, [r3, #28]
 8001ac0:	431a      	orrs	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6a1b      	ldr	r3, [r3, #32]
 8001ac6:	ea42 0103 	orr.w	r1, r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	699b      	ldr	r3, [r3, #24]
 8001ada:	0c1a      	lsrs	r2, r3, #16
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f002 0204 	and.w	r2, r2, #4
 8001ae4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	69da      	ldr	r2, [r3, #28]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001af4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b088      	sub	sp, #32
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	60f8      	str	r0, [r7, #12]
 8001b16:	60b9      	str	r1, [r7, #8]
 8001b18:	603b      	str	r3, [r7, #0]
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d101      	bne.n	8001b30 <HAL_SPI_Transmit+0x22>
 8001b2c:	2302      	movs	r3, #2
 8001b2e:	e11e      	b.n	8001d6e <HAL_SPI_Transmit+0x260>
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001b38:	f7ff f804 	bl	8000b44 <HAL_GetTick>
 8001b3c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001b3e:	88fb      	ldrh	r3, [r7, #6]
 8001b40:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d002      	beq.n	8001b54 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001b52:	e103      	b.n	8001d5c <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d002      	beq.n	8001b60 <HAL_SPI_Transmit+0x52>
 8001b5a:	88fb      	ldrh	r3, [r7, #6]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d102      	bne.n	8001b66 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001b64:	e0fa      	b.n	8001d5c <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2203      	movs	r2, #3
 8001b6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	2200      	movs	r2, #0
 8001b72:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	68ba      	ldr	r2, [r7, #8]
 8001b78:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	88fa      	ldrh	r2, [r7, #6]
 8001b7e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	88fa      	ldrh	r2, [r7, #6]
 8001b84:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2200      	movs	r2, #0
 8001b96:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bac:	d107      	bne.n	8001bbe <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001bbc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bc8:	2b40      	cmp	r3, #64	; 0x40
 8001bca:	d007      	beq.n	8001bdc <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bda:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001be4:	d14b      	bne.n	8001c7e <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d002      	beq.n	8001bf4 <HAL_SPI_Transmit+0xe6>
 8001bee:	8afb      	ldrh	r3, [r7, #22]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d13e      	bne.n	8001c72 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf8:	881a      	ldrh	r2, [r3, #0]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c04:	1c9a      	adds	r2, r3, #2
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	3b01      	subs	r3, #1
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001c18:	e02b      	b.n	8001c72 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d112      	bne.n	8001c4e <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2c:	881a      	ldrh	r2, [r3, #0]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c38:	1c9a      	adds	r2, r3, #2
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	3b01      	subs	r3, #1
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	86da      	strh	r2, [r3, #54]	; 0x36
 8001c4c:	e011      	b.n	8001c72 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c4e:	f7fe ff79 	bl	8000b44 <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d803      	bhi.n	8001c66 <HAL_SPI_Transmit+0x158>
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c64:	d102      	bne.n	8001c6c <HAL_SPI_Transmit+0x15e>
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d102      	bne.n	8001c72 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001c70:	e074      	b.n	8001d5c <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d1ce      	bne.n	8001c1a <HAL_SPI_Transmit+0x10c>
 8001c7c:	e04c      	b.n	8001d18 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d002      	beq.n	8001c8c <HAL_SPI_Transmit+0x17e>
 8001c86:	8afb      	ldrh	r3, [r7, #22]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d140      	bne.n	8001d0e <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	330c      	adds	r3, #12
 8001c96:	7812      	ldrb	r2, [r2, #0]
 8001c98:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	1c5a      	adds	r2, r3, #1
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	3b01      	subs	r3, #1
 8001cac:	b29a      	uxth	r2, r3
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001cb2:	e02c      	b.n	8001d0e <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d113      	bne.n	8001cea <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	330c      	adds	r3, #12
 8001ccc:	7812      	ldrb	r2, [r2, #0]
 8001cce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd4:	1c5a      	adds	r2, r3, #1
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	86da      	strh	r2, [r3, #54]	; 0x36
 8001ce8:	e011      	b.n	8001d0e <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001cea:	f7fe ff2b 	bl	8000b44 <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d803      	bhi.n	8001d02 <HAL_SPI_Transmit+0x1f4>
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d00:	d102      	bne.n	8001d08 <HAL_SPI_Transmit+0x1fa>
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d102      	bne.n	8001d0e <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001d0c:	e026      	b.n	8001d5c <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d1cd      	bne.n	8001cb4 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	6839      	ldr	r1, [r7, #0]
 8001d1c:	68f8      	ldr	r0, [r7, #12]
 8001d1e:	f000 fb91 	bl	8002444 <SPI_EndRxTxTransaction>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d002      	beq.n	8001d2e <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2220      	movs	r2, #32
 8001d2c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d10a      	bne.n	8001d4c <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001d36:	2300      	movs	r3, #0
 8001d38:	613b      	str	r3, [r7, #16]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	613b      	str	r3, [r7, #16]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	613b      	str	r3, [r7, #16]
 8001d4a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d002      	beq.n	8001d5a <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	77fb      	strb	r3, [r7, #31]
 8001d58:	e000      	b.n	8001d5c <HAL_SPI_Transmit+0x24e>
  }

error:
 8001d5a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001d6c:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3720      	adds	r7, #32
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}

08001d76 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d76:	b580      	push	{r7, lr}
 8001d78:	b088      	sub	sp, #32
 8001d7a:	af02      	add	r7, sp, #8
 8001d7c:	60f8      	str	r0, [r7, #12]
 8001d7e:	60b9      	str	r1, [r7, #8]
 8001d80:	603b      	str	r3, [r7, #0]
 8001d82:	4613      	mov	r3, r2
 8001d84:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001d86:	2300      	movs	r3, #0
 8001d88:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d92:	d112      	bne.n	8001dba <HAL_SPI_Receive+0x44>
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d10e      	bne.n	8001dba <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2204      	movs	r2, #4
 8001da0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001da4:	88fa      	ldrh	r2, [r7, #6]
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	9300      	str	r3, [sp, #0]
 8001daa:	4613      	mov	r3, r2
 8001dac:	68ba      	ldr	r2, [r7, #8]
 8001dae:	68b9      	ldr	r1, [r7, #8]
 8001db0:	68f8      	ldr	r0, [r7, #12]
 8001db2:	f000 f8e9 	bl	8001f88 <HAL_SPI_TransmitReceive>
 8001db6:	4603      	mov	r3, r0
 8001db8:	e0e2      	b.n	8001f80 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d101      	bne.n	8001dc8 <HAL_SPI_Receive+0x52>
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	e0db      	b.n	8001f80 <HAL_SPI_Receive+0x20a>
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001dd0:	f7fe feb8 	bl	8000b44 <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d002      	beq.n	8001de8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8001de2:	2302      	movs	r3, #2
 8001de4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001de6:	e0c2      	b.n	8001f6e <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d002      	beq.n	8001df4 <HAL_SPI_Receive+0x7e>
 8001dee:	88fb      	ldrh	r3, [r7, #6]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d102      	bne.n	8001dfa <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001df8:	e0b9      	b.n	8001f6e <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2204      	movs	r2, #4
 8001dfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2200      	movs	r2, #0
 8001e06:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	68ba      	ldr	r2, [r7, #8]
 8001e0c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	88fa      	ldrh	r2, [r7, #6]
 8001e12:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	88fa      	ldrh	r2, [r7, #6]
 8001e18:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2200      	movs	r2, #0
 8001e24:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2200      	movs	r2, #0
 8001e36:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e40:	d107      	bne.n	8001e52 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001e50:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e5c:	2b40      	cmp	r3, #64	; 0x40
 8001e5e:	d007      	beq.n	8001e70 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e6e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d162      	bne.n	8001f3e <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001e78:	e02e      	b.n	8001ed8 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f003 0301 	and.w	r3, r3, #1
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d115      	bne.n	8001eb4 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f103 020c 	add.w	r2, r3, #12
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e94:	7812      	ldrb	r2, [r2, #0]
 8001e96:	b2d2      	uxtb	r2, r2
 8001e98:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e9e:	1c5a      	adds	r2, r3, #1
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	b29a      	uxth	r2, r3
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001eb2:	e011      	b.n	8001ed8 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001eb4:	f7fe fe46 	bl	8000b44 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	683a      	ldr	r2, [r7, #0]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d803      	bhi.n	8001ecc <HAL_SPI_Receive+0x156>
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eca:	d102      	bne.n	8001ed2 <HAL_SPI_Receive+0x15c>
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d102      	bne.n	8001ed8 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001ed6:	e04a      	b.n	8001f6e <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1cb      	bne.n	8001e7a <HAL_SPI_Receive+0x104>
 8001ee2:	e031      	b.n	8001f48 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d113      	bne.n	8001f1a <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	68da      	ldr	r2, [r3, #12]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001efc:	b292      	uxth	r2, r2
 8001efe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f04:	1c9a      	adds	r2, r3, #2
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	3b01      	subs	r3, #1
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001f18:	e011      	b.n	8001f3e <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001f1a:	f7fe fe13 	bl	8000b44 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d803      	bhi.n	8001f32 <HAL_SPI_Receive+0x1bc>
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f30:	d102      	bne.n	8001f38 <HAL_SPI_Receive+0x1c2>
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d102      	bne.n	8001f3e <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001f3c:	e017      	b.n	8001f6e <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1cd      	bne.n	8001ee4 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	6839      	ldr	r1, [r7, #0]
 8001f4c:	68f8      	ldr	r0, [r7, #12]
 8001f4e:	f000 fa27 	bl	80023a0 <SPI_EndRxTransaction>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d002      	beq.n	8001f5e <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2220      	movs	r2, #32
 8001f5c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d002      	beq.n	8001f6c <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	75fb      	strb	r3, [r7, #23]
 8001f6a:	e000      	b.n	8001f6e <HAL_SPI_Receive+0x1f8>
  }

error :
 8001f6c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	2201      	movs	r2, #1
 8001f72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001f7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f80:	4618      	mov	r0, r3
 8001f82:	3718      	adds	r7, #24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b08c      	sub	sp, #48	; 0x30
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
 8001f94:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001f96:	2301      	movs	r3, #1
 8001f98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d101      	bne.n	8001fae <HAL_SPI_TransmitReceive+0x26>
 8001faa:	2302      	movs	r3, #2
 8001fac:	e18a      	b.n	80022c4 <HAL_SPI_TransmitReceive+0x33c>
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001fb6:	f7fe fdc5 	bl	8000b44 <HAL_GetTick>
 8001fba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001fc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001fcc:	887b      	ldrh	r3, [r7, #2]
 8001fce:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001fd0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d00f      	beq.n	8001ff8 <HAL_SPI_TransmitReceive+0x70>
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001fde:	d107      	bne.n	8001ff0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d103      	bne.n	8001ff0 <HAL_SPI_TransmitReceive+0x68>
 8001fe8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001fec:	2b04      	cmp	r3, #4
 8001fee:	d003      	beq.n	8001ff8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001ff6:	e15b      	b.n	80022b0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d005      	beq.n	800200a <HAL_SPI_TransmitReceive+0x82>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d002      	beq.n	800200a <HAL_SPI_TransmitReceive+0x82>
 8002004:	887b      	ldrh	r3, [r7, #2]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d103      	bne.n	8002012 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002010:	e14e      	b.n	80022b0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002018:	b2db      	uxtb	r3, r3
 800201a:	2b04      	cmp	r3, #4
 800201c:	d003      	beq.n	8002026 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2205      	movs	r2, #5
 8002022:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2200      	movs	r2, #0
 800202a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	887a      	ldrh	r2, [r7, #2]
 8002036:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	887a      	ldrh	r2, [r7, #2]
 800203c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	68ba      	ldr	r2, [r7, #8]
 8002042:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	887a      	ldrh	r2, [r7, #2]
 8002048:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	887a      	ldrh	r2, [r7, #2]
 800204e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2200      	movs	r2, #0
 8002054:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2200      	movs	r2, #0
 800205a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002066:	2b40      	cmp	r3, #64	; 0x40
 8002068:	d007      	beq.n	800207a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002078:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002082:	d178      	bne.n	8002176 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d002      	beq.n	8002092 <HAL_SPI_TransmitReceive+0x10a>
 800208c:	8b7b      	ldrh	r3, [r7, #26]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d166      	bne.n	8002160 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	881a      	ldrh	r2, [r3, #0]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	1c9a      	adds	r2, r3, #2
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	3b01      	subs	r3, #1
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80020b6:	e053      	b.n	8002160 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d11b      	bne.n	80020fe <HAL_SPI_TransmitReceive+0x176>
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d016      	beq.n	80020fe <HAL_SPI_TransmitReceive+0x176>
 80020d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d113      	bne.n	80020fe <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	881a      	ldrh	r2, [r3, #0]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	1c9a      	adds	r2, r3, #2
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	3b01      	subs	r3, #1
 80020f4:	b29a      	uxth	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80020fa:	2300      	movs	r3, #0
 80020fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	2b01      	cmp	r3, #1
 800210a:	d119      	bne.n	8002140 <HAL_SPI_TransmitReceive+0x1b8>
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002110:	b29b      	uxth	r3, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d014      	beq.n	8002140 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68da      	ldr	r2, [r3, #12]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002120:	b292      	uxth	r2, r2
 8002122:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002128:	1c9a      	adds	r2, r3, #2
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002132:	b29b      	uxth	r3, r3
 8002134:	3b01      	subs	r3, #1
 8002136:	b29a      	uxth	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800213c:	2301      	movs	r3, #1
 800213e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002140:	f7fe fd00 	bl	8000b44 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800214c:	429a      	cmp	r2, r3
 800214e:	d807      	bhi.n	8002160 <HAL_SPI_TransmitReceive+0x1d8>
 8002150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002156:	d003      	beq.n	8002160 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800215e:	e0a7      	b.n	80022b0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002164:	b29b      	uxth	r3, r3
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1a6      	bne.n	80020b8 <HAL_SPI_TransmitReceive+0x130>
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800216e:	b29b      	uxth	r3, r3
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1a1      	bne.n	80020b8 <HAL_SPI_TransmitReceive+0x130>
 8002174:	e07c      	b.n	8002270 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d002      	beq.n	8002184 <HAL_SPI_TransmitReceive+0x1fc>
 800217e:	8b7b      	ldrh	r3, [r7, #26]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d16b      	bne.n	800225c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	330c      	adds	r3, #12
 800218e:	7812      	ldrb	r2, [r2, #0]
 8002190:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	1c5a      	adds	r2, r3, #1
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	3b01      	subs	r3, #1
 80021a4:	b29a      	uxth	r2, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80021aa:	e057      	b.n	800225c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f003 0302 	and.w	r3, r3, #2
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d11c      	bne.n	80021f4 <HAL_SPI_TransmitReceive+0x26c>
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021be:	b29b      	uxth	r3, r3
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d017      	beq.n	80021f4 <HAL_SPI_TransmitReceive+0x26c>
 80021c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d114      	bne.n	80021f4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	330c      	adds	r3, #12
 80021d4:	7812      	ldrb	r2, [r2, #0]
 80021d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021dc:	1c5a      	adds	r2, r3, #1
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	3b01      	subs	r3, #1
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80021f0:	2300      	movs	r3, #0
 80021f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d119      	bne.n	8002236 <HAL_SPI_TransmitReceive+0x2ae>
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002206:	b29b      	uxth	r3, r3
 8002208:	2b00      	cmp	r3, #0
 800220a:	d014      	beq.n	8002236 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	68da      	ldr	r2, [r3, #12]
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002216:	b2d2      	uxtb	r2, r2
 8002218:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800221e:	1c5a      	adds	r2, r3, #1
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002228:	b29b      	uxth	r3, r3
 800222a:	3b01      	subs	r3, #1
 800222c:	b29a      	uxth	r2, r3
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002232:	2301      	movs	r3, #1
 8002234:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002236:	f7fe fc85 	bl	8000b44 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002242:	429a      	cmp	r2, r3
 8002244:	d803      	bhi.n	800224e <HAL_SPI_TransmitReceive+0x2c6>
 8002246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800224c:	d102      	bne.n	8002254 <HAL_SPI_TransmitReceive+0x2cc>
 800224e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002250:	2b00      	cmp	r3, #0
 8002252:	d103      	bne.n	800225c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800225a:	e029      	b.n	80022b0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002260:	b29b      	uxth	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1a2      	bne.n	80021ac <HAL_SPI_TransmitReceive+0x224>
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800226a:	b29b      	uxth	r3, r3
 800226c:	2b00      	cmp	r3, #0
 800226e:	d19d      	bne.n	80021ac <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002272:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	f000 f8e5 	bl	8002444 <SPI_EndRxTxTransaction>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d006      	beq.n	800228e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2220      	movs	r2, #32
 800228a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800228c:	e010      	b.n	80022b0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d10b      	bne.n	80022ae <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002296:	2300      	movs	r3, #0
 8002298:	617b      	str	r3, [r7, #20]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	617b      	str	r3, [r7, #20]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	617b      	str	r3, [r7, #20]
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	e000      	b.n	80022b0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80022ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80022c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3730      	adds	r7, #48	; 0x30
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	603b      	str	r3, [r7, #0]
 80022d8:	4613      	mov	r3, r2
 80022da:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80022dc:	e04c      	b.n	8002378 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022e4:	d048      	beq.n	8002378 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80022e6:	f7fe fc2d 	bl	8000b44 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	683a      	ldr	r2, [r7, #0]
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d902      	bls.n	80022fc <SPI_WaitFlagStateUntilTimeout+0x30>
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d13d      	bne.n	8002378 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	685a      	ldr	r2, [r3, #4]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800230a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002314:	d111      	bne.n	800233a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800231e:	d004      	beq.n	800232a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002328:	d107      	bne.n	800233a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002338:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800233e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002342:	d10f      	bne.n	8002364 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002362:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2200      	movs	r2, #0
 8002370:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e00f      	b.n	8002398 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	689a      	ldr	r2, [r3, #8]
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	4013      	ands	r3, r2
 8002382:	68ba      	ldr	r2, [r7, #8]
 8002384:	429a      	cmp	r2, r3
 8002386:	bf0c      	ite	eq
 8002388:	2301      	moveq	r3, #1
 800238a:	2300      	movne	r3, #0
 800238c:	b2db      	uxtb	r3, r3
 800238e:	461a      	mov	r2, r3
 8002390:	79fb      	ldrb	r3, [r7, #7]
 8002392:	429a      	cmp	r2, r3
 8002394:	d1a3      	bne.n	80022de <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3710      	adds	r7, #16
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af02      	add	r7, sp, #8
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023b4:	d111      	bne.n	80023da <SPI_EndRxTransaction+0x3a>
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023be:	d004      	beq.n	80023ca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023c8:	d107      	bne.n	80023da <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023d8:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023e2:	d117      	bne.n	8002414 <SPI_EndRxTransaction+0x74>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023ec:	d112      	bne.n	8002414 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	9300      	str	r3, [sp, #0]
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	2200      	movs	r2, #0
 80023f6:	2101      	movs	r1, #1
 80023f8:	68f8      	ldr	r0, [r7, #12]
 80023fa:	f7ff ff67 	bl	80022cc <SPI_WaitFlagStateUntilTimeout>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d01a      	beq.n	800243a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002408:	f043 0220 	orr.w	r2, r3, #32
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002410:	2303      	movs	r3, #3
 8002412:	e013      	b.n	800243c <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	9300      	str	r3, [sp, #0]
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	2200      	movs	r2, #0
 800241c:	2180      	movs	r1, #128	; 0x80
 800241e:	68f8      	ldr	r0, [r7, #12]
 8002420:	f7ff ff54 	bl	80022cc <SPI_WaitFlagStateUntilTimeout>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d007      	beq.n	800243a <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800242e:	f043 0220 	orr.w	r2, r3, #32
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e000      	b.n	800243c <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b086      	sub	sp, #24
 8002448:	af02      	add	r7, sp, #8
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	9300      	str	r3, [sp, #0]
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	2200      	movs	r2, #0
 8002458:	2180      	movs	r1, #128	; 0x80
 800245a:	68f8      	ldr	r0, [r7, #12]
 800245c:	f7ff ff36 	bl	80022cc <SPI_WaitFlagStateUntilTimeout>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d007      	beq.n	8002476 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800246a:	f043 0220 	orr.w	r2, r3, #32
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e000      	b.n	8002478 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	3710      	adds	r7, #16
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <__libc_init_array>:
 8002480:	b570      	push	{r4, r5, r6, lr}
 8002482:	2500      	movs	r5, #0
 8002484:	4e0c      	ldr	r6, [pc, #48]	; (80024b8 <__libc_init_array+0x38>)
 8002486:	4c0d      	ldr	r4, [pc, #52]	; (80024bc <__libc_init_array+0x3c>)
 8002488:	1ba4      	subs	r4, r4, r6
 800248a:	10a4      	asrs	r4, r4, #2
 800248c:	42a5      	cmp	r5, r4
 800248e:	d109      	bne.n	80024a4 <__libc_init_array+0x24>
 8002490:	f000 f822 	bl	80024d8 <_init>
 8002494:	2500      	movs	r5, #0
 8002496:	4e0a      	ldr	r6, [pc, #40]	; (80024c0 <__libc_init_array+0x40>)
 8002498:	4c0a      	ldr	r4, [pc, #40]	; (80024c4 <__libc_init_array+0x44>)
 800249a:	1ba4      	subs	r4, r4, r6
 800249c:	10a4      	asrs	r4, r4, #2
 800249e:	42a5      	cmp	r5, r4
 80024a0:	d105      	bne.n	80024ae <__libc_init_array+0x2e>
 80024a2:	bd70      	pop	{r4, r5, r6, pc}
 80024a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80024a8:	4798      	blx	r3
 80024aa:	3501      	adds	r5, #1
 80024ac:	e7ee      	b.n	800248c <__libc_init_array+0xc>
 80024ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80024b2:	4798      	blx	r3
 80024b4:	3501      	adds	r5, #1
 80024b6:	e7f2      	b.n	800249e <__libc_init_array+0x1e>
 80024b8:	08002528 	.word	0x08002528
 80024bc:	08002528 	.word	0x08002528
 80024c0:	08002528 	.word	0x08002528
 80024c4:	0800252c 	.word	0x0800252c

080024c8 <memset>:
 80024c8:	4603      	mov	r3, r0
 80024ca:	4402      	add	r2, r0
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d100      	bne.n	80024d2 <memset+0xa>
 80024d0:	4770      	bx	lr
 80024d2:	f803 1b01 	strb.w	r1, [r3], #1
 80024d6:	e7f9      	b.n	80024cc <memset+0x4>

080024d8 <_init>:
 80024d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024da:	bf00      	nop
 80024dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024de:	bc08      	pop	{r3}
 80024e0:	469e      	mov	lr, r3
 80024e2:	4770      	bx	lr

080024e4 <_fini>:
 80024e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024e6:	bf00      	nop
 80024e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024ea:	bc08      	pop	{r3}
 80024ec:	469e      	mov	lr, r3
 80024ee:	4770      	bx	lr
